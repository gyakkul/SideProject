<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BuildGraph.Automation</name>
    </assembly>
    <members>
        <member name="T:AutomationTool.BgConditionException">
            <summary>
            Exception class thrown due to type and syntax errors in condition expressions
            </summary>
        </member>
        <member name="M:AutomationTool.BgConditionException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor; formats the exception message with the given String.Format() style parameters.
            </summary>
            <param name="format">Formatting string, in String.Format syntax</param>
            <param name="args">Optional arguments for the string</param>
        </member>
        <member name="T:AutomationTool.BgCondition">
            <summary>
            Class to evaluate condition expressions in build scripts, following this grammar:
            
            	or-expression   ::= and-expression
            	                  | or-expression "Or" and-expression;
            	    
            	and-expression  ::= comparison
            	                  | and-expression "And" comparison;
            	                  
            	comparison      ::= scalar
            	                  | scalar "==" scalar
            	                  | scalar "!=" scalar
            	                  | scalar "&lt;" scalar
            	                  | scalar "&lt;=" scalar;
            	                  | scalar "&gt;" scalar
            	                  | scalar "&gt;=" scalar;
            	                  
                scalar          ::= "(" or-expression ")"
                                  | "!" scalar
                                  | "Exists" "(" scalar ")"
                                  | "HasTrailingSlash" "(" scalar ")"
                                  | string
                                  | identifier;
                                  
                string          ::= any sequence of characters terminated by single quotes (') or double quotes ("). Not escaped.
                identifier      ::= any sequence of letters, digits, or underscore characters.
                
            The type of each subexpression is always a scalar, which are converted to expression-specific types (eg. booleans, integers) as required.
            Scalar values are case-insensitive strings. The identifier 'true' and the strings "true" and "True" are all identical scalars.
            </summary>
        </member>
        <member name="F:AutomationTool.BgCondition.EndToken">
            <summary>
            Sentinel added to the end of a sequence of tokens.
            </summary>
        </member>
        <member name="F:AutomationTool.BgCondition._tokens">
            <summary>
            Tokens for the condition
            </summary>
        </member>
        <member name="F:AutomationTool.BgCondition._idx">
            <summary>
            The current token index
            </summary>
        </member>
        <member name="M:AutomationTool.BgCondition.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">The condition text</param>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateAsync(System.String)">
            <summary>
            Evaluates the given string as a condition. Throws a ConditionException on a type or syntax error.
            </summary>
            <param name="text"></param>
            <returns>The result of evaluating the condition</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateAsync">
            <summary>
            Evaluates the given string as a condition. Throws a ConditionException on a type or syntax error.
            </summary>
            <returns>The result of evaluating the condition</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateOrAsync">
            <summary>
            Evaluates an "or-expression" production.
            </summary>
            <returns>A scalar representing the result of evaluating the expression.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateAndAsync">
            <summary>
            Evaluates an "and-expression" production.
            </summary>
            <returns>A scalar representing the result of evaluating the expression.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateComparisonAsync">
            <summary>
            Evaluates a "comparison" production.
            </summary>
            <returns>The result of evaluating the expression</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateArguments">
            <summary>
            Evaluates arguments from a token string. Arguments are all comma-separated tokens until a closing ) is encountered
            </summary>
            <returns>The result of evaluating the expression</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.EvaluateScalarAsync">
            <summary>
            Evaluates a "scalar" production.
            </summary>
            <returns>The result of evaluating the expression</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.Exists(System.String)">
            <summary>
            Determine if a path exists
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.BgCondition.Contains(System.String,System.String)">
            <summary>
            Checks whether Haystack contains "Needle". 
            </summary>
            <param name="haystack">The string to search</param>
            <param name="needle">The string to search for</param>
            <returns>True if the path exists, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.ContainsItem(System.String,System.String,System.String)">
            <summary>
            Checks whether HaystackItems contains "Needle". 
            </summary>
            <param name="haystack">The separated list of items to check</param>
            <param name="needle">The item to check for</param>
            <param name="haystackSeparator">The separator used in Haystack</param>
            <returns>True if the path exists, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.CoerceToBool(System.String)">
            <summary>
            Converts a scalar to a boolean value.
            </summary>
            <param name="scalar">The scalar to convert</param>
            <returns>The scalar converted to a boolean value.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.CoerceToInteger(System.String)">
            <summary>
            Converts a scalar to a boolean value.
            </summary>
            <param name="scalar">The scalar to convert</param>
            <returns>The scalar converted to an integer value.</returns>
        </member>
        <member name="M:AutomationTool.BgCondition.Tokenize(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Splits an input string up into expression tokens.
            </summary>
            <param name="text">Text to be converted into tokens</param>
            <param name="tokens">List to receive a list of tokens</param>
        </member>
        <member name="M:AutomationTool.BgCondition.TestConditions">
            <summary>
            Test cases for conditions.
            </summary>
        </member>
        <member name="M:AutomationTool.BgCondition.TestConditionAsync(System.String,System.Boolean)">
            <summary>
            Helper method to evaluate a condition and check it's the expected result
            </summary>
            <param name="condition">Condition to evaluate</param>
            <param name="expectedResult">The expected result</param>
        </member>
        <member name="T:AutomationTool.BgGraphBuilder">
            <summary>
            Base class for any user defined graphs
            </summary>
        </member>
        <member name="M:AutomationTool.BgGraphBuilder.CreateGraph(AutomationTool.BgEnvironment)">
            <summary>
            Callback used to instantiate the graph
            </summary>
            <param name="env">The graph context</param>
        </member>
        <member name="T:AutomationTool.BgNodeExecutor">
            <summary>
            Base class for binding and executing nodes
            </summary>
        </member>
        <member name="M:AutomationTool.BgBytecodeNodeExecutor.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the method given in the 
            </summary>
            <param name="Job"></param>
            <param name="TagNameToFileSet"></param>
            <returns></returns>
        </member>
        <member name="T:AutomationTool.BgScriptNodeExecutor">
            <summary>
            Implementation of <see cref="T:EpicGames.BuildGraph.BgNodeDef"/> for graphs defined through XML syntax
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptNodeExecutor.Node">
            <summary>
            The script node
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptNodeExecutor._boundTasks">
            <summary>
            List of bound task implementations
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptNodeExecutor.#ctor(AutomationTool.BgScriptNode)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptNodeExecutor.ParseValue(System.String,System.Type)">
            <summary>
            Parse a value of the given type
            </summary>
            <param name="ValueText">The text to parse</param>
            <param name="ValueType">Type of the value to parse</param>
            <returns>Value that was parsed</returns>
        </member>
        <member name="M:AutomationTool.BgScriptNodeExecutor.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Build all the tasks for this node
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include. Should be set to contain the node inputs on entry.</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="T:AutomationTool.TaskParameterValidationType">
            <summary>
            Specifies validation that should be performed on a task parameter.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.Default">
            <summary>
            Allow any valid values for the field type.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.TagList">
            <summary>
            A list of tag names separated by semicolons
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.FileSpec">
            <summary>
            A file specification, which may contain tags and wildcards.
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptTaskParameter">
            <summary>
            Information about a parameter to a task
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTaskParameter.Name">
            <summary>
            Name of this parameter
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTaskParameter.ValueType">
            <summary>
            The type for values assigned to this field
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTaskParameter.CollectionType">
            <summary>
            The ICollection interface for this type
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTaskParameter.ValidationType">
            <summary>
            Validation type for this field
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTaskParameter.Optional">
            <summary>
            Whether this parameter is optional
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptTaskParameter.#ctor(System.String,System.Type,AutomationTool.TaskParameterValidationType,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptTask">
            <summary>
            Helper class to serialize a task from an xml element
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTask.Name">
            <summary>
            Name of this task
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptTask.#ctor(System.String,System.Collections.Generic.List{AutomationTool.BgScriptTaskParameter})">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the task</param>
            <param name="parameters">Parameters for the task</param>
        </member>
        <member name="T:AutomationTool.ScriptSchemaStandardType">
            <summary>
            Enumeration of standard types used in the schema. Avoids hard-coding names.
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptSchema">
            <summary>
            Schema for build graph definitions. Stores information about the supported tasks, and allows validating an XML document.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.RootElementName">
            <summary>
            Name of the root element
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.NamespaceUri">
            <summary>
            Namespace for the schema
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.s_stringTypeName">
            <summary>
            Qualified name for the string type
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.CompiledSchema">
            <summary>
            The inner xml schema
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.IllegalNameCharacters">
            <summary>
            Characters which are not permitted in names.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.NamePattern">
            <summary>
            Pattern which matches any name; alphanumeric characters, with single embedded spaces.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.NameListPattern">
            <summary>
            Pattern which matches a list of names, separated by semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.TagPattern">
            <summary>
            Pattern which matches any tag name; a name with a leading '#' character
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.TagListPattern">
            <summary>
            Pattern which matches a list of tag names, separated by semicolons;
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.NameOrTagPattern">
            <summary>
            Pattern which matches any name or tag name; a name with a leading '#' character
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.NameOrTagListPattern">
            <summary>
            Pattern which matches a list of names or tag names, separated by semicolons;
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.QualifiedNamePattern">
            <summary>
            Pattern which matches a qualified name.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.PropertyPattern">
            <summary>
            Pattern which matches a property name
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.StringWithPropertiesPattern">
            <summary>
            Pattern which matches balanced parentheses in a string
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptSchema.BalancedStringPattern">
            <summary>
            Pattern which matches balanced parentheses in a string
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.#ctor(System.Collections.Generic.IEnumerable{AutomationTool.BgScriptTask},System.Collections.Generic.List{System.ValueTuple{System.Type,AutomationTool.ScriptSchemaStandardType}})">
            <summary>
            Constructor
            </summary>
            <param name="tasks">Set of known tasks</param>
            <param name="primitiveTypes">Mapping of task name to information about how to construct it</param>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.Export(EpicGames.Core.FileReference)">
            <summary>
            Export the schema to a file
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.Import(EpicGames.Core.FileReference)">
            <summary>
            Imports a schema from a file
            </summary>
            <param name="file">The XML file to import</param>
            <returns>A <see cref="T:AutomationTool.BgScriptSchema"/> deserialized from the XML file, or null if file doesn't exist</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.GetTypeName(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Gets the bare name for the given script type
            </summary>
            <param name="type">Script type to find the name of</param>
            <returns>Name of the schema type that matches the given script type</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.GetQualifiedTypeName(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Gets the qualified name for the given script type
            </summary>
            <param name="type">Script type to find the qualified name for</param>
            <returns>Qualified name of the schema type that matches the given script type</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.GetQualifiedTypeName(AutomationTool.TaskParameterValidationType)">
            <summary>
            Gets the qualified name of the schema type for the given type of validation
            </summary>
            <returns>Qualified name for the corresponding schema type</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateGraphType">
            <summary>
            Creates the schema type representing the graph type
            </summary>
            <returns>Type definition for a graph</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateAgentType">
            <summary>
            Creates the schema type representing the agent type
            </summary>
            <returns>Type definition for an agent</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateAgentBodyType">
            <summary>
            Creates the schema type representing the contents of agent type
            </summary>
            <returns>Type definition for an agent</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateNodeType">
            <summary>
            Creates the schema type representing the node type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateNodeBodyType(System.Collections.Generic.Dictionary{System.String,System.Xml.Schema.XmlSchemaComplexType})">
            <summary>
            Creates the schema type representing the body of the node type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateAggregateType">
            <summary>
            Creates the schema type representing the aggregate type
            </summary>
            <returns>Type definition for an aggregate</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateReportType">
            <summary>
            Creates the schema type representing the report type
            </summary>
            <returns>Type definition for a report</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateBadgeType">
            <summary>
            Creates the schema type representing the badge type
            </summary>
            <returns>Type definition for a badge</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateLabelType">
            <summary>
            Creates the schema type representing the label type
            </summary>
            <returns>Type definition for a label</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateNotifyType">
            <summary>
            Creates the schema type representing a notifier
            </summary>
            <returns>Type definition for a notifier</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateAnnotateType">
            <summary>
            Creates the schema type representing an annotation
            </summary>
            <returns>Type definition for a notifier</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateIncludeType">
            <summary>
            Creates the schema type representing an include type
            </summary>
            <returns>Type definition for an include directive</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateOptionType">
            <summary>
            Creates the schema type representing a parameter type
            </summary>
            <returns>Type definition for a parameter</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateEnvVarType">
            <summary>
            Creates the schema type representing a environment variable type
            </summary>
            <returns>Type definition for an environment variable property</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreatePropertyType">
            <summary>
            Creates the schema type representing a property type
            </summary>
            <returns>Type definition for a property</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateRegexType">
            <summary>
            Creates the schema type representing a regex type
            </summary>
            <returns>Type definition for a regex</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateMacroType">
            <summary>
            Creates the schema type representing the macro type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateMacroBodyType(System.Collections.Generic.Dictionary{System.String,System.Xml.Schema.XmlSchemaComplexType})">
            <summary>
            Creates the schema type representing the macro type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateExtendType">
            <summary>
            Creates the schema type representing the macro type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateExpandType">
            <summary>
            Creates the schema type representing a macro expansion
            </summary>
            <returns>Type definition for expanding a macro</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateDiagnosticType(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates the schema type representing a warning or error type
            </summary>
            <returns>Type definition for a warning</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateDoElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "Do" block, which recursively contains another type
            </summary>
            <param name="innerType">The base type for the do block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSwitchElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "Switch" block, which recursively contains another type
            </summary>
            <param name="innerType">The base type for the do block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateForEachElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "ForEach" block, which recursively contains another type
            </summary>
            <param name="innerType">The base type for the foreach block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSchemaElement(System.String,AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Constructs an XmlSchemaElement and initializes it with the given parameters
            </summary>
            <param name="name">Element name</param>
            <param name="schemaType">Type enumeration for the attribute</param>
            <returns>A new XmlSchemaElement object</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSchemaElement(System.String,System.Xml.XmlQualifiedName)">
            <summary>
            Constructs an XmlSchemaElement and initializes it with the given parameters
            </summary>
            <param name="name">Element name</param>
            <param name="schemaTypeName">Qualified name of the type for this element</param>
            <returns>A new XmlSchemaElement object</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSchemaAttribute(System.String,AutomationTool.ScriptSchemaStandardType,System.Xml.Schema.XmlSchemaUse)">
            <summary>
            Constructs an XmlSchemaAttribute and initialize it with the given parameters
            </summary>
            <param name="name">The attribute name</param>
            <param name="schemaType">Type enumeration for the attribute</param>
            <param name="use">Whether the attribute is required or optional</param>
            <returns>A new XmlSchemaAttribute object</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSchemaAttribute(System.String,System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaUse)">
            <summary>
            Constructs an XmlSchemaAttribute and initialize it with the given parameters
            </summary>
            <param name="name">The attribute name</param>
            <param name="schemaTypeName">Qualified name of the type for this attribute</param>
            <param name="use">Whether the attribute is required or optional</param>
            <returns>The new attribute</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSimpleTypeFromUnion(System.String,System.Xml.Schema.XmlSchemaType[])">
            <summary>
            Creates a simple type that is the union of two other types
            </summary>
            <param name="name">The name of the type</param>
            <param name="validTypes">List of valid types for the union</param>
            <returns>A simple type which will match the given pattern</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateSimpleTypeFromRegex(System.String,System.String)">
            <summary>
            Creates a simple type that matches a regex
            </summary>
            <param name="name">Name of the new type</param>
            <param name="pattern">Regex pattern to match</param>
            <returns>A simple type which will match the given pattern</returns>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateUserType(System.String,System.Type)">
            <summary>
            Create a schema type for the given user type. Currently only handles enumerations.
            </summary>
            <param name="name">Name for the new type</param>
            <param name="type">CLR type information to create a schema type for</param>
        </member>
        <member name="M:AutomationTool.BgScriptSchema.CreateEnumType(System.String,System.Type)">
            <summary>
            Create a schema type for the given enum.
            </summary>
            <param name="name">Name for the new type</param>
            <param name="type">CLR type information to create a schema type for</param>
        </member>
        <member name="T:AutomationTool.BgScriptLocation">
            <summary>
            Location of an element within a file
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptLocation.File">
            <summary>
            The file containing this element
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptLocation.LineNumber">
            <summary>
            The line number containing this element
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptLocation.#ctor(EpicGames.Core.FileReference,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="file"></param>
            <param name="lineNumber"></param>
        </member>
        <member name="T:AutomationTool.BgScriptDocument">
            <summary>
            Implementation of XmlDocument which preserves line numbers for its elements
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptDocument.File">
            <summary>
            The file being read
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptDocument._lineInfo">
            <summary>
            Interface to the LineInfo on the active XmlReader
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptDocument._bHasErrors">
            <summary>
            Set to true if the reader encounters an error
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptDocument.Logger">
            <summary>
            Logger for validation errors
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptDocument.#ctor(EpicGames.Core.FileReference,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Private constructor. Use ScriptDocument.Load to read an XML document.
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            Overrides XmlDocument.CreateElement() to construct ScriptElements rather than XmlElements
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptDocument.TryRead(EpicGames.Core.FileReference,System.Byte[],AutomationTool.BgScriptSchema,Microsoft.Extensions.Logging.ILogger,AutomationTool.BgScriptDocument@)">
            <summary>
            Loads a script document from the given file
            </summary>
            <param name="file">The file to load</param>
            <param name="data"></param>
            <param name="schema">The schema to validate against</param>
            <param name="logger">Logger for output messages</param>
            <param name="outDocument">If successful, the document that was read</param>
            <returns>True if the document could be read, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.BgScriptDocument.ValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Callback for validation errors in the document
            </summary>
            <param name="sender">Standard argument for ValidationEventHandler</param>
            <param name="args">Standard argument for ValidationEventHandler</param>
        </member>
        <member name="T:AutomationTool.BgScriptElement">
            <summary>
            Implementation of XmlElement which preserves line numbers
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptElement.Location">
            <summary>
            Location of the element within the file
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptElement.#ctor(AutomationTool.BgScriptLocation,System.String,System.String,System.String,AutomationTool.BgScriptDocument)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptMacro">
            <summary>
            Stores information about a script function that has been declared
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptMacro.Name">
            <summary>
            Name of the function
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptMacro.Elements">
            <summary>
            Element where the function was declared
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptMacro.NumArguments">
            <summary>
            The total number of arguments
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptMacro.NumRequiredArguments">
            <summary>
            Number of arguments that are required
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptMacro.ArgumentNameToIndex">
            <summary>
            Maps an argument name to its type
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptMacro.#ctor(System.String,AutomationTool.BgScriptElement,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the function</param>
            <param name="element">Element containing the function definition</param>
            <param name="argumentNameToIndex">Map of argument name to index</param>
            <param name="numRequiredArguments">Number of arguments that are required. Indices 0 to NumRequiredArguments - 1 are required.</param>
        </member>
        <member name="T:AutomationTool.BgScriptExtensions">
            <summary>
            Extension methods for writing script error messages
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptExtensions.LogScriptError(Microsoft.Extensions.Logging.ILogger,AutomationTool.BgScriptLocation,System.String,System.Object[])">
            <summary>
            Utility method to log a script error at a particular location
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptExtensions.LogScriptWarning(Microsoft.Extensions.Logging.ILogger,AutomationTool.BgScriptLocation,System.String,System.Object[])">
            <summary>
            Utility method to log a script warning at a particular location
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptNode">
            <summary>
            Overridden version of <see cref="T:EpicGames.BuildGraph.BgNodeDef"/> which contains a list of tasks
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptNode.Tasks">
            <summary>
            List of tasks to execute
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptNode.#ctor(System.String,System.Collections.Generic.IReadOnlyList{EpicGames.BuildGraph.BgNodeOutput},System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{EpicGames.BuildGraph.BgNodeDef},System.Collections.Generic.IReadOnlyList{EpicGames.BuildGraph.BgNodeDef},System.Collections.Generic.IReadOnlyList{EpicGames.Core.FileReference})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.BgScriptReader">
            <summary>
            Reader for build graph definitions. Instanced to contain temporary state; public interface is through ScriptReader.TryRead().
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptReader.ScopedProperties">
            <summary>
            List of property name to value lookups. Modifications to properties are scoped to nodes and agents. EnterScope() pushes an empty dictionary onto the end of this list, and LeaveScope() removes one. 
            ExpandProperties() searches from last to first lookup when trying to resolve a property name, and takes the first it finds.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptReader._shadowProperties">
            <summary>
            When declaring a property in a nested scope, we enter its name into a set for each parent scope which prevents redeclaration in an OUTER scope later. Subsequent NESTED scopes can redeclare it.
            The former is likely a coding error, since it implies that the scope of the variable was meant to be further out, whereas the latter is common for temporary and loop variables.
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptReader._macroNameToDefinition">
            <summary>
            Maps from a function name to its definition
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptReader._graph">
            <summary>
            The current graph
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptReader._arguments">
            <summary>
            Arguments for evaluating the graph
            </summary>
        </member>
        <member name="F:AutomationTool.BgScriptReader._singleNodeName">
            <summary>
            The name of the node if only a single node is going to be built, otherwise null.
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptReader.Schema">
            <summary>
            Schema for the script
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptReader.Logger">
            <summary>
            Logger for diagnostic messages
            </summary>
        </member>
        <member name="P:AutomationTool.BgScriptReader.NumErrors">
            <summary>
            The number of errors encountered during processing so far
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptReader.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,AutomationTool.BgScriptSchema,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Private constructor. Use ScriptReader.TryRead() to read a script file.
            </summary>
            <param name="defaultProperties">Default properties available to the script</param>
            <param name="arguments">Arguments passed in to the graph on the command line</param>
            <param name="singleNodeName">If a single node will be processed, the name of that node.</param>
            <param name="schema">Schema for the script</param>
            <param name="logger">Logger for diagnostic messages</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAsync(EpicGames.Core.FileReference,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},AutomationTool.BgScriptSchema,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Try to read a script file from the given file.
            </summary>
            <param name="file">File to read from</param>
            <param name="arguments">Arguments passed in to the graph on the command line</param>
            <param name="defaultProperties">Default properties available to the script</param>
            <param name="schema">Schema for the script</param>
            <param name="logger">Logger for output messages</param>
            <param name="singleNodeName">If a single node will be processed, the name of that node.</param>
            <returns>True if the graph was read, false if there were errors</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.TryReadAsync(EpicGames.Core.FileReference)">
            <summary>
            Read the script from the given file
            </summary>
            <param name="file">File to read from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadGraphBodyAsync(System.Xml.XmlElement)">
            <summary>
            Reads the contents of a graph
            </summary>
            <param name="element">The parent element to read from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.EnterScope">
            <summary>
            Push a new property scope onto the stack
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptReader.LeaveScope">
            <summary>
            Pop a property scope from the stack
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptReader.SetPropertyValue(AutomationTool.BgScriptElement,System.String,System.String)">
            <summary>
            Sets a property value in the current scope
            </summary>
            <param name="element">Element containing the property assignment. Used for error messages if the property is shadowed in another scope.</param>
            <param name="name">Name of the property</param>
            <param name="value">Value for the property</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.TryGetPropertyValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a property
            </summary>
            <param name="name">Name of the property</param>
            <param name="value">On success, contains the value of the property. Set to null otherwise.</param>
            <returns>True if the property was found, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadIncludeAsync(AutomationTool.BgScriptElement)">
            <summary>
            Read an include directive, and the contents of the target file
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.CombinePaths(System.String,System.String)">
            <summary>
            Combine two paths without validating the result
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptReader.FindMatchingFiles(System.String)">
            <summary>
            Find files matching a pattern
            </summary>
            <param name="Pattern"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadOptionAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition of a graph option; a parameter which can be set by the user on the command-line or via an environment variable.
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadPropertyAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a property assignment.
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadRegexAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a Regex assignment.
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadEnvVarAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a property assignment from an environment variable.
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadMacro(AutomationTool.BgScriptElement)">
            <summary>
            Reads a macro definition
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadMacroArguments(AutomationTool.BgScriptElement,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Reads a list of macro arguments from an attribute
            </summary>
            <param name="element">The element containing the attributes</param>
            <param name="attributeName">Name of the attribute containing the arguments</param>
            <param name="argumentNameToIndex">List of arguments to add to</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadExtendAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a macro definition
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAgentAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for an agent.
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAgentBodyAsync(AutomationTool.BgScriptElement)">
            <summary>
            Read the contents of an agent definition
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAggregateAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for an aggregate
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadReportAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for a report
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadBadgeAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for a badge
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadLabelAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for a label
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadNodeAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for a node, and adds it to the given agent
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadNodeBodyAsync(System.Xml.XmlElement)">
            <summary>
            Reads the contents of a node element
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadBlockAsync(AutomationTool.BgScriptElement,System.Func{AutomationTool.BgScriptElement,System.Threading.Tasks.Task})">
            <summary>
            Reads a block element
            </summary>
            <param name="element">Xml element to read the definition from</param>
            <param name="readContentsAsync">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadSwitchAsync(AutomationTool.BgScriptElement,System.Func{AutomationTool.BgScriptElement,System.Threading.Tasks.Task})">
            <summary>
            Reads a "Switch" element 
            </summary>
            <param name="element">Xml element to read the definition from</param>
            <param name="readContentsAsync">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadForEachAsync(AutomationTool.BgScriptElement,System.Func{AutomationTool.BgScriptElement,System.Threading.Tasks.Task})">
            <summary>
            Reads a "ForEach" element 
            </summary>
            <param name="element">Xml element to read the definition from</param>
            <param name="readContentsAsync">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadExpandAsync(AutomationTool.BgScriptElement,System.Func{AutomationTool.BgScriptElement,System.Threading.Tasks.Task})">
            <summary>
            Reads an "Expand" element 
            </summary>
            <param name="element">Xml element to read the definition from</param>
            <param name="readContentsAsync">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadTaskAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a task definition from the given element, and add it to the given list
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadNotifierAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads the definition for an email notifier
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAnnotationAsync(AutomationTool.BgScriptElement)">
            <summary>
            Reads a graph annotation
            </summary>
            <param name="element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadDiagnosticAsync(AutomationTool.BgScriptElement,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Reads a warning from the given element, evaluates the condition on it, and writes it to the log if the condition passes.
            </summary>
            <param name="element">Xml element to read the definition from</param>
            <param name="level">The diagnostic event type</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.TryReadObjectName(AutomationTool.BgScriptElement,System.String@)">
            <summary>
            Reads an object name from its defining element. Outputs an error if the name is missing.
            </summary>
            <param name="element">Element to read the name for</param>
            <param name="name">Output variable to receive the name of the object</param>
            <returns>True if the object had a valid name (assigned to the Name variable), false if the name was invalid or missing.</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.CheckNameIsUnique(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Checks that the given name does not already used to refer to a node, and print an error if it is.
            </summary>
            <param name="element">Xml element to read from</param>
            <param name="name">Name of the alias</param>
            <returns>True if the name was registered correctly, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ResolveReferences(AutomationTool.BgScriptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolve a list of references to a set of nodes
            </summary>
            <param name="element">Element used to locate any errors</param>
            <param name="referenceNames">Sequence of names to look up</param>
            <returns>Hashset of all the nodes included by the given names</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ResolveInputReferences(AutomationTool.BgScriptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolve a list of references to a set of nodes
            </summary>
            <param name="element">Element used to locate any errors</param>
            <param name="referenceNames">Sequence of names to look up</param>
            <returns>Set of all the nodes included by the given names</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ValidateName(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Checks that the given name is valid syntax
            </summary>
            <param name="element">The element that contains the name</param>
            <param name="name">The name to check</param>
            <returns>True if the name is valid</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ParseRegex(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Constructs a regex from a regex string and returns it
            </summary>
            <param name="element">The element that contains the regex</param>
            <param name="regex">The pattern to construct</param>
            <returns>The regex if is valid, otherwise null</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAttribute(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Expands any properties and reads an attribute.
            </summary>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <returns>Array of names, with all leading and trailing whitespace removed</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadListAttribute(AutomationTool.BgScriptElement,System.String,System.Char)">
            <summary>
            Expands any properties and reads a list of strings from an attribute, separated by semi-colon characters
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <param name="separator"></param>
            <returns>Array of names, with all leading and trailing whitespace removed</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadAnnotationsAttribute(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Parse a map of annotations
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ParseAnnotations(AutomationTool.BgScriptElement,System.String[])">
            <summary>
            Parse a map of annotations
            </summary>
            <param name="element"></param>
            <param name="pairs"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadBooleanAttribute(AutomationTool.BgScriptElement,System.String,System.Boolean)">
            <summary>
            Reads an attribute from the given XML element, expands any properties in it, and parses it as a boolean.
            </summary>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <param name="bDefaultValue">Default value if the attribute is missing</param>
            <returns>The value of the attribute field</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadIntegerAttribute(AutomationTool.BgScriptElement,System.String,System.Int32)">
            <summary>
            Reads an attribute from the given XML element, expands any properties in it, and parses it as an integer.
            </summary>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <param name="defaultValue">Default value for the integer, if the attribute is missing</param>
            <returns>The value of the attribute field</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ReadEnumAttribute``1(AutomationTool.BgScriptElement,System.String,``0)">
            <summary>
            Reads an attribute from the given XML element, expands any properties in it, and parses it as an enum of the given type.
            </summary>
            <typeparam name="T">The enum type to parse the attribute as</typeparam>
            <param name="element">Element to read the attribute from</param>
            <param name="name">Name of the attribute</param>
            <param name="defaultValue">Default value for the enum, if the attribute is missing</param>
            <returns>The value of the attribute field</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.LogError(AutomationTool.BgScriptElement,System.String,System.Object[])">
            <summary>
            Outputs an error message to the log and increments the number of errors, referencing the file and line number of the element that caused it.
            </summary>
            <param name="element">The script element causing the error</param>
            <param name="format">Standard String.Format()-style format string</param>
            <param name="args">Optional arguments</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.LogWarning(AutomationTool.BgScriptElement,System.String,System.Object[])">
            <summary>
            Outputs a warning message to the log and increments the number of errors, referencing the file and line number of the element that caused it.
            </summary>
            <param name="element">The script element causing the error</param>
            <param name="format">Standard String.Format()-style format string</param>
            <param name="args">Optional arguments</param>
        </member>
        <member name="M:AutomationTool.BgScriptReader.EvaluateConditionAsync(AutomationTool.BgScriptElement)">
            <summary>
            Evaluates the (optional) conditional expression on a given XML element via the If="..." attribute, and returns true if the element is enabled.
            </summary>
            <param name="element">The element to check</param>
            <returns>True if the element's condition evaluates to true (or doesn't have a conditional expression), false otherwise</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.ExpandProperties(AutomationTool.BgScriptElement,System.String)">
            <summary>
            Expand all the property references (of the form $(PropertyName)) in a string.
            </summary>
            <param name="element">The element containing the string. Used for diagnostic messages.</param>
            <param name="text">The input string to expand properties in</param>
            <returns>The expanded string</returns>
        </member>
        <member name="M:AutomationTool.BgScriptReader.GetNativePath(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AutomationTool.BgScriptWriter">
            <summary>
            Implementation of XmlDocument which preserves line numbers for its elements
            </summary>
        </member>
        <member name="M:AutomationTool.BgScriptWriter.Write(EpicGames.BuildGraph.BgGraphDef,EpicGames.Core.FileReference,EpicGames.Core.FileReference)">
            <summary>
            Writes a preprocessed build graph to a script file
            </summary>
            <param name="graph">Graph to output</param>
            <param name="file">The file to load</param>
            <param name="schemaFile">Schema file for validation</param>
        </member>
        <member name="M:AutomationTool.BgScriptWriter.Write(EpicGames.BuildGraph.BgAgentDef,System.Xml.XmlWriter)">
            <summary>
            Writes this agent group out to a file, filtering nodes by a controlling trigger
            </summary>
            <param name="agent">Agent to output</param>
            <param name="writer">The XML writer to output to</param>
        </member>
        <member name="M:AutomationTool.BgScriptWriter.Write(EpicGames.BuildGraph.BgNodeDef,System.Xml.XmlWriter)">
            <summary>
            Write this node to an XML writer
            </summary>
            <param name="node">Node to output</param>
            <param name="writer">The writer to output the node to</param>
        </member>
        <member name="T:AutomationTool.BgTask">
            <summary>
            A task invocation
            </summary>
        </member>
        <member name="P:AutomationTool.BgTask.Location">
            <summary>
            Line number in a source file that this task was declared. Optional; used for log messages.
            </summary>
        </member>
        <member name="P:AutomationTool.BgTask.Name">
            <summary>
            Name of the task
            </summary>
        </member>
        <member name="P:AutomationTool.BgTask.Arguments">
            <summary>
            Arguments for the task
            </summary>
        </member>
        <member name="M:AutomationTool.BgTask.#ctor(AutomationTool.BgScriptLocation,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AutomationTool.BgTask.Write(System.Xml.XmlWriter)">
            <summary>
            Write to an xml file
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:AutomationTool.ScriptTaskParameterBinding">
            <summary>
            Implementation of ScriptTaskParameter corresponding to a field in a parameter class
            </summary>
        </member>
        <member name="P:AutomationTool.ScriptTaskParameterBinding.FieldInfo">
            <summary>
            Field for this parameter
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptTaskParameterBinding.#ctor(System.String,System.Reflection.FieldInfo,AutomationTool.TaskParameterValidationType,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.ScriptTaskBinding">
            <summary>
            Binding of a ScriptTask to a Script
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskBinding.TaskClass">
            <summary>
            Type of the task to construct with this info
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskBinding.ParametersClass">
            <summary>
            Type to construct with the parsed parameters
            </summary>
        </member>
        <member name="P:AutomationTool.ScriptTaskBinding.NameToParameter">
            <summary>
            Map from name to parameter
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptTaskBinding.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="Name">Name of the task</param>
            <param name="TaskClass">Task class to create</param>
            <param name="ParametersClass">Class type of an object to be constructed and passed as an argument to the task class constructor</param>
        </member>
        <member name="M:AutomationTool.ScriptTaskBinding.#ctor(System.String,System.Type,System.Type,System.Collections.Generic.List{AutomationTool.ScriptTaskParameterBinding})">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="T:AutomationTool.BgEnvironment">
            <summary>
            Environment for graph evaluation
            </summary>
        </member>
        <member name="P:AutomationTool.BgEnvironment.Stream">
            <summary>
            The stream being built
            </summary>
        </member>
        <member name="P:AutomationTool.BgEnvironment.Change">
            <summary>
            Current changelist
            </summary>
        </member>
        <member name="P:AutomationTool.BgEnvironment.CodeChange">
            <summary>
            Current code changelist
            </summary>
        </member>
        <member name="P:AutomationTool.BgEnvironment.IsBuildMachine">
            <summary>
            Whether the graph is being run on a build machine
            </summary>
        </member>
        <member name="P:AutomationTool.BgEnvironment.EngineVersion">
            <summary>
            The current engine version
            </summary>
        </member>
        <member name="M:AutomationTool.BgEnvironment.#ctor(AutomationTool.P4Environment)">
            <summary>
            Constructor
            </summary>
            <param name="P4Env"></param>
        </member>
        <member name="T:AutomationTool.BuildGraph">
             <summary>
             Tool to execute build automation scripts for UE projects, which can be run locally or in parallel across a build farm (assuming synchronization and resource allocation implemented by a separate system).
            
             Build graphs are declared using an XML script using syntax similar to MSBuild, ANT or NAnt, and consist of the following components:
            
             - Tasks:        Building blocks which can be executed as part of the build process. Many predefined tasks are provided ('Cook', 'Compile', 'Copy', 'Stage', 'Log', 'PakFile', etc...), and additional tasks may be 
                             added be declaring classes derived from AutomationTool.BuildTask in other UAT modules. 
             - Nodes:        A named sequence of tasks which are executed in order to produce outputs. Nodes may have dependencies on other nodes for their outputs before they can be executed. Declared with the 'Node' element.
             - Agents:		A machine which can execute a sequence of nodes, if running as part of a build system. Has no effect when building locally. Declared with the 'Agent' element.
             - Triggers:     Container for agents which should only be executed when explicitly triggered (using the -Trigger=... or -SkipTriggers command line argument). Declared with the 'Trigger' element.
             - Notifiers:    Specifies email recipients for failures in one or more nodes, whether they should receive notifications on warnings, and so on.
             
             Scripts may set properties with the &lt;Property Name="Foo" Value="Bar"/&gt; syntax. Properties referenced with the $(Property Name) notation are valid within all strings, and will be expanded as macros when the 
             script is read. If a property name is not set explicitly, it defaults to the contents of an environment variable with the same name. Properties may be sourced from environment variables or the command line using
             the &lt;EnvVar&gt; and &lt;Option&gt; elements respectively.
            
             Any elements can be conditionally defined via the "If" attribute. A full grammar for conditions is written up in Condition.cs.
             
             File manipulation is done using wildcards and tags. Any attribute that accepts a list of files may consist of: a Perforce-style wildcard (matching any number of "...", "*" and "?" patterns in any location), a 
             full path name, or a reference to a tagged collection of files, denoted by prefixing with a '#' character. Files may be added to a tag set using the &lt;Tag&gt; Task, which also allows performing set union/difference 
             style operations. Each node can declare multiple outputs in the form of a list of named tags, which other nodes can then depend on.
             
             Build graphs may be executed in parallel as part build system. To do so, the initial graph configuration is generated by running with the -Export=... argument (producing a JSON file listing the nodes 
             and dependencies to execute). Each participating agent should be synced to the same changelist, and UAT should be re-run with the appropriate -Node=... argument. Outputs from different nodes are transferred between 
             agents via shared storage, typically a network share, the path to which can be specified on the command line using the -SharedStorageDir=... argument. Note that the allocation of machines, and coordination between 
             them, is assumed to be managed by an external system based on the contents of the script generated by -Export=....
             
             A schema for the known set of tasks can be generated by running UAT with the -Schema=... option. Generating a schema and referencing it from a BuildGraph script allows Visual Studio to validate and auto-complete 
             elements as you type.
             </summary>
        </member>
        <member name="M:AutomationTool.BuildGraph.ExecuteAsync">
            <summary>
            Main entry point for the BuildGraph command
            </summary>
        </member>
        <member name="M:AutomationTool.BuildGraph.FindAvailableTasks(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTaskBinding},System.Boolean)">
            <summary>
            Find all the tasks which are available from the loaded assemblies
            </summary>
            <param name="NameToTask">Mapping from task name to information about how to serialize it</param>
            <param name="bPublicTasksOnly">Whether to include just public tasks, or all the tasks in any loaded assemblies</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.ReadTokenFile(EpicGames.Core.FileReference)">
            <summary>
            Reads the contents of the given token
            </summary>
            <returns>Contents of the token, or null if it does not exist</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.WriteTokenFile(EpicGames.Core.FileReference,System.String)">
            <summary>
            Attempts to write an owner to a token file transactionally
            </summary>
            <returns>True if the lock was acquired, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.IsPublicAssembly(EpicGames.Core.FileReference)">
            <summary>
            Checks whether the given assembly is a publically distributed engine assembly.
            </summary>
            <param name="File">Assembly location</param>
            <returns>True if the assembly is distributed publically</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.FindCompletedNodes(EpicGames.BuildGraph.BgGraphDef,AutomationTool.TempStorage)">
            <summary>
            Find all the nodes in the graph which are already completed
            </summary>
            <param name="Graph">The graph instance</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.BuildAllNodesAsync(AutomationTool.JobContext,EpicGames.BuildGraph.BgGraphDef,System.Collections.Generic.Dictionary{EpicGames.BuildGraph.BgNodeDef,AutomationTool.BgNodeExecutor},AutomationTool.TempStorage)">
            <summary>
            Builds all the nodes in the graph
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="Graph">The graph instance</param>
            <param name="NodeToExecutor">Map from node to executor</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
            <returns>True if everything built successfully</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.BuildNodeAsync(AutomationTool.JobContext,EpicGames.BuildGraph.BgGraphDef,EpicGames.BuildGraph.BgNodeDef,System.Collections.Generic.Dictionary{EpicGames.BuildGraph.BgNodeDef,AutomationTool.BgNodeExecutor},AutomationTool.TempStorage,System.Boolean)">
            <summary>
            Build a node
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="Graph">The graph to which the node belongs. Used to determine which outputs need to be transferred to temp storage.</param>
            <param name="Node">The node to build</param>
            <param name="NodeToExecutor">Map from node to executor</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
            <param name="bWithBanner">Whether to write a banner before and after this node's log output</param>
            <returns>True if the node built successfully, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.WriteDocumentation(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTaskBinding},EpicGames.Core.FileReference)">
            <summary>
            Generate HTML documentation for all the tasks
            </summary>
            <param name="NameToTask">Map of task name to implementation</param>
            <param name="OutputFile">Output file</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.WriteDocumentationUDN(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTaskBinding},System.Collections.Generic.Dictionary{System.String,System.Xml.XmlElement},EpicGames.Core.FileReference)">
            <summary>
            Writes documentation to a UDN file
            </summary>
            <param name="NameToTask">Map of name to script task</param>
            <param name="MemberNameToElement">Map of field name to XML documenation element</param>
            <param name="OutputFile">The output file to write to</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.WriteDocumentationHTML(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTaskBinding},System.Collections.Generic.Dictionary{System.String,System.Xml.XmlElement},EpicGames.Core.FileReference)">
            <summary>
            Writes documentation to an HTML file
            </summary>
            <param name="NameToTask">Map of name to script task</param>
            <param name="MemberNameToElement">Map of field name to XML documenation element</param>
            <param name="OutputFile">The output file to write to</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.ConvertToMarkdown(System.Xml.XmlNode)">
            <summary>
            Converts an XML documentation node to markdown
            </summary>
            <param name="Node">The node to read</param>
            <returns>Text in markdown format</returns>
        </member>
        <member name="T:AutomationTool.Build">
            <summary>
            Legacy command name for compatibility.
            </summary>
        </member>
        <member name="T:AutomationTool.JobContext">
            <summary>
            Used to pass information to tasks about the currently running job.
            </summary>
        </member>
        <member name="F:AutomationTool.JobContext.OwnerCommand">
            <summary>
            The command that is running the current job.
            </summary>
        </member>
        <member name="M:AutomationTool.JobContext.#ctor(AutomationTool.BuildCommand)">
            <summary>
            Constructor
            </summary>
            <param name="InOwnerCommand">The command running the current job</param>
        </member>
        <member name="M:AutomationTool.InstalledBuild.UpdateVersionFilesAsync(EpicGames.BuildGraph.BgContext)">
            <summary>
            Update the build version
            </summary>
        </member>
        <member name="M:AutomationTool.InstalledBuild.CompileUnrealEditorWin64Async(EpicGames.BuildGraph.BgContext,EpicGames.BuildGraph.Expressions.BgString,EpicGames.BuildGraph.Expressions.BgBool,EpicGames.BuildGraph.Expressions.BgBool,EpicGames.BuildGraph.Expressions.BgBool,EpicGames.BuildGraph.Expressions.BgBool)">
            <summary>
            Builds the Windows editor
            </summary>
        </member>
        <member name="M:AutomationTool.InstalledBuild.CompileUnrealGameWin64(EpicGames.BuildGraph.BgContext,EpicGames.BuildGraph.Expressions.BgList{EpicGames.BuildGraph.Expressions.BgEnum{UnrealBuildTool.UnrealTargetConfiguration}},EpicGames.BuildGraph.Expressions.BgBool,EpicGames.BuildGraph.Expressions.BgBool,EpicGames.BuildGraph.Expressions.BgBool)">
            <summary>
            Builds the game target
            </summary>
        </member>
        <member name="M:AutomationTool.InstalledBuild.BuildDDCWin64Async(EpicGames.BuildGraph.BgContext,EpicGames.BuildGraph.Expressions.BgList{EpicGames.BuildGraph.Expressions.BgString},EpicGames.BuildGraph.Expressions.BgList{EpicGames.BuildGraph.Expressions.BgFileSet})">
            <summary>
            Creates a DDC pack file for the supported platforms
            </summary>
        </member>
        <member name="M:AutomationTool.InstalledBuild.MakeInstalledBuildWin64Async(EpicGames.BuildGraph.BgContext,EpicGames.BuildGraph.Expressions.BgList{EpicGames.BuildGraph.Expressions.BgFileSet},EpicGames.BuildGraph.Expressions.BgString,EpicGames.BuildGraph.Expressions.BgString)">
            <summary>
            Copy all the build artifacts to the output folder
            </summary>
        </member>
        <member name="T:AutomationTool.TaskParameterAttribute">
            <summary>
            Attribute to mark parameters to a task, which should be read as XML attributes from the script file.
            </summary>
        </member>
        <member name="P:AutomationTool.TaskParameterAttribute.Optional">
            <summary>
            Whether the parameter can be omitted
            </summary>
        </member>
        <member name="P:AutomationTool.TaskParameterAttribute.ValidationType">
            <summary>
            Sets additional restrictions on how this field is validated in the schema. Default is to allow any valid field type.
            </summary>
        </member>
        <member name="T:AutomationTool.TaskElementAttribute">
            <summary>
            Attribute used to associate an XML element name with a parameter block that can be used to construct tasks
            </summary>
        </member>
        <member name="F:AutomationTool.TaskElementAttribute.Name">
            <summary>
            Name of the XML element that can be used to denote this class
            </summary>
        </member>
        <member name="F:AutomationTool.TaskElementAttribute.ParametersType">
            <summary>
            Type to be constructed from the deserialized element
            </summary>
        </member>
        <member name="M:AutomationTool.TaskElementAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the XML element used to denote this object</param>
            <param name="InParametersType">Type to be constructed from this object</param>
        </member>
        <member name="T:AutomationTool.ITaskExecutor">
            <summary>
            Proxy to handle executing multiple tasks simultaneously (such as compile tasks). If a task supports simultaneous execution, it can return a separate
            executor an executor instance from GetExecutor() callback. If not, it must implement Execute().
            </summary>
        </member>
        <member name="M:AutomationTool.ITaskExecutor.Add(AutomationTool.BgTaskImpl)">
            <summary>
            Adds another task to this executor
            </summary>
            <param name="Task">Task to add</param>
            <returns>True if the task could be added, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.ITaskExecutor.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute all the tasks added to this executor.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="T:AutomationTool.BgTaskImpl">
            <summary>
            Base class for all custom build tasks
            </summary>
        </member>
        <member name="P:AutomationTool.BgTaskImpl.SourceLocation">
            <summary>
            Line number in a source file that this task was declared. Optional; used for log messages.
            </summary>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute this node.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.GetExecutor">
            <summary>
            Creates a proxy to execute this node.
            </summary>
            <returns>New proxy instance if one is available to execute this task, otherwise null.</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes this task to an XML writer, using the given parameters object.
            </summary>
            <param name="Writer">Writer for the XML schema</param>
            <param name="Parameters">Parameters object that this task is constructed with</param>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.GetTraceString">
            <summary>
            Returns a string used for trace messages
            </summary>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.GetTraceName">
            <summary>
            Gets the name of this task for tracing
            </summary>
            <returns>The trace name</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.GetTraceMetadata(EpicGames.Core.ITraceSpan,System.String)">
            <summary>
            Get properties to include in tracing info
            </summary>
            <param name="Span">The scope to add properties to</param>
            <param name="Prefix">Prefix for metadata entries</param>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.GetTraceMetadata(OpenTracing.ISpan,System.String)">
            <summary>
            Get properties to include in tracing info
            </summary>
            <param name="Span">The scope to add properties to</param>
            <param name="Prefix">Prefix for metadata entries</param>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.FindTagNamesFromFilespec(System.String)">
            <summary>
            Adds tag names from a filespec
            </summary>
            <param name="Filespec">A filespec, as can be passed to ResolveFilespec</param>
            <returns>Tag names from this filespec</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.FindTagNamesFromList(System.String)">
            <summary>
            Enumerates tag names from a list
            </summary>
            <param name="TagList">List of tags separated by semicolons</param>
            <returns>Tag names from this filespec</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ResolveFile(System.String)">
            <summary>
            Resolves a single name to a file reference, resolving relative paths to the root of the current path.
            </summary>
            <param name="Name">Name of the file</param>
            <returns>Fully qualified file reference</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ResolveDirectory(System.String)">
            <summary>
            Resolves a directory reference from the given string. Assumes the root directory is the root of the current branch.
            </summary>
            <param name="Name">Name of the directory. May be null or empty.</param>
            <returns>The resolved directory</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.FindOrAddTagSet(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}},System.String)">
            <summary>
            Finds or adds a set containing files with the given tag
            </summary>
            <param name="TagNameToFileSet">Map of tag names to the set of files they contain</param>
            <param name="TagName">The tag name to return a set for. A leading '#' character is required.</param>
            <returns>Set of files</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ResolveFilespec(EpicGames.Core.DirectoryReference,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications separated by semicolons. Supported entries may be:
              a) The name of a tag set (eg. #CompiledBinaries)
              b) Relative or absolute filenames
              c) A simple file pattern (eg. Foo/*.cpp)
              d) A full directory wildcard (eg. Engine/...)
            Note that wildcards may only match the last fragment in a pattern, so matches like "/*/Foo.txt" and "/.../Bar.txt" are illegal.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="DelimitedPatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ResolveFilespecWithExcludePatterns(EpicGames.Core.DirectoryReference,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications separated by semicolons as above, but preserves any directory references for further processing.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="DelimitedPatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="ExcludePatterns">Set of patterns to apply to directory searches. This can greatly speed up enumeration by earlying out of recursive directory searches if large directories are excluded (eg. .../Intermediate/...).</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.ResolveFilespecWithExcludePatterns(EpicGames.Core.DirectoryReference,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications as above, but preserves any directory references for further processing.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="FilePatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="ExcludePatterns">Set of patterns to apply to directory searches. This can greatly speed up enumeration by earlying out of recursive directory searches if large directories are excluded (eg. .../Intermediate/...).</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.BgTaskImpl.SplitDelimitedList(System.String)">
            <summary>
            Splits a string separated by semicolons into a list, removing empty entries
            </summary>
            <param name="Text">The input string</param>
            <returns>Array of the parsed items</returns>
        </member>
        <member name="T:AutomationTool.CustomTask">
            <summary>
            Legacy implementation of <see cref="T:AutomationTool.BgTaskImpl"/> which operates synchronously
            </summary>
        </member>
        <member name="M:AutomationTool.CustomTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <inheritdoc/>
        </member>
        <member name="M:AutomationTool.CustomTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute this node.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="T:AutomationTool.Tasks.AgeStoreTaskParameters">
            <summary>
            Parameters for a task that purges data from a symbol store after a given age
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTaskParameters.Platform">
            <summary>
            The target platform to age symbols for.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTaskParameters.StoreDir">
            <summary>
            The symbol server directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTaskParameters.Days">
            <summary>
            Number of days worth of symbols to keep.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTaskParameters.BuildDir">
            <summary>
            The root of the build directory to check for existing buildversion named directories.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTaskParameters.Filter">
            <summary>
            A substring to match in directory file names before deleting symbols. This allows the "age store" task
            to avoid deleting symbols from other builds in the case where multiple builds share the same symbol server.
            Specific use of the filter value is determined by the symbol server structure defined by the platform toolchain.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.AgeStoreTask">
            <summary>
            Task that strips symbols from a set of files. This task is named after the AGESTORE utility that comes with the Microsoft debugger tools SDK, but is actually a separate implementation. The main
            difference is that it uses the last modified time rather than last access time to determine which files to delete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AgeStoreTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AgeStoreTask.#ctor(AutomationTool.Tasks.AgeStoreTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.AgeStoreTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.AgeStoreTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AgeStoreTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.AgeStoreTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.AwsAssumeRoleTaskParameters">
            <summary>
            Parameters for an AWS CLI task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.Arn">
            <summary>
            Role to assume
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.Session">
            <summary>
            Name of this session
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.Duration">
            <summary>
            Duration of the token in seconds
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.Environment">
            <summary>
            Environment variables
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.EnvironmentFile">
            <summary>
            File to read environment variables from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTaskParameters.OutputFile">
            <summary>
            Output file for the new environment
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.AwsAssumeRoleTask">
            <summary>
            Assumes an AWS role.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsAssumeRoleTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsAssumeRoleTask.#ctor(AutomationTool.Tasks.AwsAssumeRoleTaskParameters)">
            <summary>
            Construct an AWS CLI task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsAssumeRoleTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsAssumeRoleTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsAssumeRoleTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.AwsAssumeRoleTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.AwsEcsDeployTaskParameters">
            <summary>
            Parameters for a AWS ECS deploy task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.TaskDefinitionFile">
            <summary>
            Task definition file to use
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.DockerImage">
            <summary>
            Docker image to set in new task definition (will replace %%DOCKER_PATTERN%% with this value)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.Version">
            <summary>
            App version to set in new task definition (will replace %%VERSION%% with this value)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.Cluster">
            <summary>
            Cluster ARN representing AWS ECS cluster to operate on
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.Service">
            <summary>
            Service name to update and deploy to
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.Environment">
            <summary>
            Environment variables
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.EnvironmentFile">
            <summary>
            File to read environment from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTaskParameters.LogOutput">
            <summary>
            Write output to the log
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.AwsEcsDeployTask">
            <summary>
            Creates a new AWS ECS task definition and updates the ECS service to use this new revision of the task def
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsEcsDeployTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsEcsDeployTask.#ctor(AutomationTool.Tasks.AwsEcsDeployTaskParameters)">
            <summary>
            Construct an AWS ECS deploy task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsEcsDeployTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsEcsDeployTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsEcsDeployTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.AwsEcsDeployTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.AwsTaskParameters">
            <summary>
            Parameters for a spawn task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsTaskParameters.Arguments">
            <summary>
            Arguments for the newly created process.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsTaskParameters.Environment">
            <summary>
            Environment variables
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsTaskParameters.EnvironmentFile">
            <summary>
            File to read environment from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsTaskParameters.LogOutput">
            <summary>
            Write output to the log
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.AwsTask">
            <summary>
            Spawns AWS CLI and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.AwsTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsTask.#ctor(AutomationTool.Tasks.AwsTaskParameters)">
            <summary>
            Construct an AWS CLI task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.AwsTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.AwsTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.AwsTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CommandletTaskParameters">
            <summary>
            Parameters for a task which runs a UE commandlet
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Name">
            <summary>
            The commandlet name to execute.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Project">
            <summary>
            The project to run the editor with.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Arguments">
            <summary>
            Arguments to be passed to the commandlet.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.EditorExe">
            <summary>
            The editor executable to use. Defaults to the development UnrealEditor executable for the current platform.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.ErrorLevel">
            <summary>
            The minimum exit code, which is treated as an error.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CommandletTask">
            <summary>
            Spawns the editor to run a commandlet.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.#ctor(AutomationTool.Tasks.CommandletTaskParameters)">
            <summary>
            Construct a new CommandletTask.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.StandardTasks">
            <summary>
            Task wrapper methods
            </summary>
            <summary>
            Task wrapper methods
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.CommandletAsync(EpicGames.BuildGraph.BgContext,System.String,EpicGames.Core.FileReference,System.String,EpicGames.Core.FileReference,System.Int32)">
            <summary>
            Task which runs a UE commandlet
            </summary>
            <param name="State"></param>
            <param name="Name">The commandlet name to execute.</param>
            <param name="Project">The project to run the editor with.</param>
            <param name="Arguments">Arguments to be passed to the commandlet.</param>
            <param name="EditorExe">The editor executable to use. Defaults to the development UnrealEditor executable for the current platform.</param>
            <param name="ErrorLevel">The minimum exit code, which is treated as an error.</param>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.CommandAsync(EpicGames.BuildGraph.BgContext,System.String,System.String,System.String)">
            <summary>
            Runs another UAT command
            </summary>
            <param name="State">The execution state</param>
            <param name="Name">Name of the command to run</param>
            <param name="Arguments">Arguments for the command</param>
            <param name="MergeTelemetryWithPrefix">If non-null, instructs telemetry from the command to be merged into the telemetry for this UAT instance with the given prefix. May be an empty (non-null) string.</param>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.CompileAsync(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,EpicGames.Core.FileReference,System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Compiles a target
            </summary>
            <param name="Target">The target to compile</param>
            <param name="Configuration">The configuration to compile</param>
            <param name="Platform">The platform to compile for</param>
            <param name="Project">The project to compile with</param>
            <param name="Arguments">Additional arguments for UnrealBuildTool</param>
            <param name="AllowXGE">Whether to allow using XGE for compilation</param>
            <param name="AllowParallelExecutor">Whether to allow using the parallel executor for this compile</param>
            <param name="Clean">Whether to allow cleaning this target. If unspecified, targets are cleaned if the -Clean argument is passed on the command line</param>
            <returns>Build products from the compile</returns>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.CsCompileAsync(EpicGames.Core.FileReference,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Compile a C# project
            </summary>
            <param name="Project">The C# project files to compile.</param>
            <param name="Platform">The platform to compile.</param>
            <param name="Configuration">The configuration to compile.</param>
            <param name="Target">The target to build.</param>
            <param name="Properties">Properties for the command.</param>
            <param name="Arguments">Additional options to pass to the compiler.</param>
            <param name="EnumerateOnly">Only enumerate build products -- do not actually compile the projects.</param>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.DotNetAsync(System.String,EpicGames.Core.DirectoryReference,System.String,EpicGames.Core.FileReference,System.Int32,EpicGames.Core.FileReference)">
            <summary>
            Runs a command using dotnet.
            </summary>
            <param name="Arguments">Command-line arguments.</param>
            <param name="BaseDir">Base directory for running the command.</param>
            <param name="Environment">Environment variables to set.</param>
            <param name="EnvironmentFile">File to read environment variables from.</param>
            <param name="ErrorLevel">The minimum exit code, which is treated as an error.</param>
            <param name="DotNetPath">Override path to dotnet executable.</param>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.ExecuteAsync(AutomationTool.BgTaskImpl)">
            <summary>
            Execute a task instance
            </summary>
            <param name="Task"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.SetVersionAsync(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Updates the current engine version
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.SpawnAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Execute an external program
            </summary>
            <param name="Exe">Executable to spawn.</param>
            <param name="Arguments">Arguments for the newly created process.</param>
            <param name="WorkingDir">Working directory for spawning the new task.</param>
            <param name="Environment">Environment variables to set.</param>
            <param name="EnvironmentFile">File to read environment from.</param>
            <param name="LogOutput">Write output to the log.</param>
            <param name="ErrorLevel">The minimum exit code which is treated as an error.</param>
        </member>
        <member name="M:AutomationTool.Tasks.StandardTasks.StripAsync(EpicGames.Core.FileSet,UnrealBuildTool.UnrealTargetPlatform,EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference)">
            <summary>
            Strips symbols from a set of files.
            </summary>
            <param name="Files"></param>
            <param name="Platform">The platform toolchain to strip binaries.</param>
            <param name="BaseDir">The directory to find files in.</param>
            <param name="OutputDir">Output directory for the stripped files. Defaults to the input path, overwriting the input files.</param>
            <returns></returns>
        </member>
        <member name="T:AutomationTool.Tasks.CommandTaskParameters">
            <summary>
            Parameters for a task that calls another UAT command
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandTaskParameters.Name">
            <summary>
            The command name to execute.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandTaskParameters.Arguments">
            <summary>
            Arguments to be passed to the command.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandTaskParameters.MergeTelemetryWithPrefix">
            <summary>
            If non-null, instructs telemetry from the command to be merged into the telemetry for this UAT instance with the given prefix. May be an empty (non-null) string.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CommandTask">
            <summary>
            Invokes an AutomationTool child process to run the given command.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.#ctor(AutomationTool.Tasks.CommandTaskParameters)">
            <summary>
            Construct a new CommandTask.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.GetTraceName">
            <summary>
            Gets the name of this trace
            </summary>
            <returns>Name of the trace</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CommandTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CompileTaskParameters">
            <summary>
            Parameters for a compile task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Target">
            <summary>
            The target to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Configuration">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Platform">
            <summary>
            The platform to compile for.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Project">
            <summary>
            The project to compile with.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Arguments">
            <summary>
            Additional arguments for UnrealBuildTool.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.AllowXGE">
            <summary>
            Whether to allow using XGE for compilation.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.AllowParallelExecutor">
            <summary>
            Whether to allow using the parallel executor for this compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.AllowAllCores">
            <summary>
            Whether to allow UBT to use all available cores, when AllowXGE is disabled.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Clean">
            <summary>
            Whether to allow cleaning this target. If unspecified, targets are cleaned if the -Clean argument is passed on the command line.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CompileTaskExecutor">
            <summary>
            Executor for compile tasks, which can compile multiple tasks simultaneously
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskExecutor.Targets">
            <summary>
            List of targets to compile. As well as the target specifically added for this task, additional compile tasks may be merged with it.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskExecutor.TargetToTagName">
            <summary>
            Mapping of receipt filename to its corresponding tag name
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskExecutor.bAllowXGE">
            <summary>
            Whether to allow using XGE for this job
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskExecutor.bAllowParallelExecutor">
            <summary>
            Whether to allow using the parallel executor for this job
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTaskExecutor.bAllowAllCores">
            <summary>
            Whether to allow using all available cores for this job, when bAllowXGE is false
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTaskExecutor.#ctor(AutomationTool.Tasks.CompileTask)">
            <summary>
            Constructor
            </summary>
            <param name="Task">Initial task to execute</param>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTaskExecutor.Add(AutomationTool.BgTaskImpl)">
            <summary>
            Adds another task to this executor
            </summary>
            <param name="Task">Task to add</param>
            <returns>True if the task could be added, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTaskExecutor.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute all the tasks added to this executor.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CompileTask">
            <summary>
            Compiles a target with UnrealBuildTool.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CompileTask.ProjectFile">
            <summary>
            Resolved path to Project file
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.#ctor(AutomationTool.Tasks.CompileTaskParameters)">
            <summary>
            Construct a compile task
            </summary>
            <param name="Parameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.FindProjectFile">
            <summary>
            Resolve the path to the project file
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.GetExecutor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.GetTraceMetadata(EpicGames.Core.ITraceSpan,System.String)">
            <summary>
            Get properties to include in tracing info
            </summary>
            <param name="Span">The span to add metadata to</param>
            <param name="Prefix">Prefix for all metadata keys</param>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.GetTraceMetadata(OpenTracing.ISpan,System.String)">
            <summary>
            Get properties to include in tracing info
            </summary>
            <param name="Span">The span to add metadata to</param>
            <param name="Prefix">Prefix for all metadata keys</param>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CompileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CookTaskParameters">
            <summary>
            Parameters for a task that runs the cooker
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Project">
            <summary>
            Project file to be cooked.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Platform">
            <summary>
            The cook platform to target (for example, Windows).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Maps">
            <summary>
            List of maps to be cooked, separated by '+' characters.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Versioned">
            <summary>
            Additional arguments to be passed to the cooker.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Arguments">
            <summary>
            Additional arguments to be passed to the cooker.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.EditorExe">
            <summary>
            Optional path to what editor executable to run for cooking.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CookTask">
            <summary>
            Cook a selection of maps for a certain platform
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CookTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CookTask.#ctor(AutomationTool.Tasks.CookTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CookTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CookTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CookTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CookTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CopyTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.Files">
            <summary>
            Optional filter to be applied to the list of input files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.From">
            <summary>
            The pattern(s) to copy from (for example, Engine/*.txt).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.To">
            <summary>
            The directory to copy to.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.Overwrite">
            <summary>
            Whether or not to overwrite existing files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTaskParameters.ErrorIfNotFound">
            <summary>
            Whether or not to throw an error if no files were found to copy
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CopyTask">
            <summary>
            Copies files from one directory to another.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CopyTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.#ctor(AutomationTool.Tasks.CopyTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.ExecuteAsync(System.Collections.Generic.Dictionary{EpicGames.Core.FileReference,EpicGames.Core.FileReference},System.Boolean)">
            <summary>
            
            </summary>
            <param name="TargetFileToSourceFile"></param>
            <param name="Overwrite"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CopyTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.BgStateExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.BgStateExtensions.CopyToAsync(EpicGames.Core.FileSet,EpicGames.Core.DirectoryReference,System.Nullable{System.Boolean})">
            <summary>
            Copy files from one location to another
            </summary>
            <param name="Files">The files to copy</param>
            <param name="TargetDir"></param>
            <param name="Overwrite">Whether or not to overwrite existing files.</param>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileTaskParameters">
            <summary>
            Parameters for a task that compiles a C# project
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Project">
            <summary>
            The C# project file to compile. Using semicolons, more than one project file can be specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Configuration">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Platform">
            <summary>
            The platform to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Target">
            <summary>
            The target to build.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Properties">
            <summary>
            Properties for the command
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Arguments">
            <summary>
            Additional options to pass to the compiler.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.EnumerateOnly">
            <summary>
            Only enumerate build products -- do not actually compile the projects.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.TagReferences">
            <summary>
            Tag to be applied to any non-private references the projects have.
            (for example, those that are external and not copied into the output directory).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.UseSystemCompiler">
            <summary>
            Whether to use the system toolchain rather than the bundled UE SDK
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileTask">
            <summary>
            Compiles C# project files, and their dependencies.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.#ctor(AutomationTool.Tasks.CsCompileTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindBuildProductsAndReferences(System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{EpicGames.Core.FileReference}@,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}@)">
            <summary>
            Find all the build products created by compiling the given project file
            </summary>
            <param name="ProjectFiles">Initial project file to read. All referenced projects will also be read.</param>
            <param name="InitialProperties">Mapping of property name to value</param>
            <param name="OutBuildProducts">Receives a set of build products on success</param>
            <param name="OutReferences">Receives a set of non-private references on success</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.ReadProjectsRecursively(EpicGames.Core.FileReference,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{EpicGames.Core.FileReference,EpicGames.Core.CsProjectInfo})">
            <summary>
            Read a project file, plus all the project files it references.
            </summary>
            <param name="File">Project file to read</param>
            <param name="InitialProperties">Mapping of property name to value for the initial project</param>
            <param name="FileToProjectInfo"></param>
            <returns>True if the projects were read correctly, false (and prints an error to the log) if not</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileOutput">
            <summary>
            Output from compiling a csproj file
            </summary>
        </member>
        <member name="P:AutomationTool.Tasks.CsCompileOutput.Empty">
            <summary>
            Empty instance of CsCompileOutput
            </summary>
        </member>
        <member name="P:AutomationTool.Tasks.CsCompileOutput.Binaries">
            <summary>
            Output binaries
            </summary>
        </member>
        <member name="P:AutomationTool.Tasks.CsCompileOutput.References">
            <summary>
            Referenced output
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileOutput.#ctor(EpicGames.Core.FileSet,EpicGames.Core.FileSet)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileOutput.Merge">
            <summary>
            Merge all outputs from this project
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileOutput.op_Addition(AutomationTool.Tasks.CsCompileOutput,AutomationTool.Tasks.CsCompileOutput)">
            <summary>
            Merges two outputs together
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileOutputExtensions">
            <summary>
            Extension methods for csproj compilation
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileOutputExtensions.MergeAsync(System.Threading.Tasks.Task{AutomationTool.Tasks.CsCompileOutput})">
            <summary>
            
            </summary>
            <param name="Task"></param>
            <returns></returns>
        </member>
        <member name="T:AutomationTool.Tasks.DeleteTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DeleteTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (for example, *.cpp;Engine/.../*.bat), or the name of a tag set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DeleteTaskParameters.Directories">
            <summary>
            List of directory names
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DeleteTaskParameters.DeleteEmptyDirectories">
            <summary>
            Whether to delete empty directories after deleting the files. Defaults to true.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DeleteTaskParameters.Verbose">
            <summary>
            Whether or not to use verbose logging.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DeleteTask">
            <summary>
            Delete a set of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DeleteTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.#ctor(AutomationTool.Tasks.DeleteTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.TryDeleteEmptyDirectory(EpicGames.Core.DirectoryReference)">
            <summary>
            Deletes a directory, if it's empty
            </summary>
            <param name="CandidateDirectory">The directory to check</param>
            <returns>True if the directory was deleted, false if not</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DeleteTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DockerBuildTaskParameters">
            <summary>
            Parameters for a Docker-Build task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.BaseDir">
            <summary>
            Base directory for the build
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.Files">
            <summary>
            Files to be staged before building the image
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.DockerFile">
            <summary>
            Path to the Dockerfile. Uses the root of basedir if not specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.DockerIgnoreFile">
            <summary>
            Path to a .dockerignore. Will be copied to basedir if specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.UseBuildKit">
            <summary>
            Use BuildKit in Docker
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.ProgressOutput">
            <summary>
            Type of progress output (--progress)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.Tag">
            <summary>
            Tag for the image
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.Arguments">
            <summary>
            Optional arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.OverlayDirs">
            <summary>
            List of additional directories to overlay into the staged input files. Allows credentials to be staged, etc...
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.Environment">
            <summary>
            Environment variables to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTaskParameters.EnvironmentFile">
            <summary>
            File to read environment variables from
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DockerBuildTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerBuildTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerBuildTask.#ctor(AutomationTool.Tasks.DockerBuildTaskParameters)">
            <summary>
            Construct a Docker task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerBuildTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerBuildTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerBuildTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerBuildTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DockerComposeDownTaskParameters">
            <summary>
            Parameters for a Docker-Compose task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeDownTaskParameters.File">
            <summary>
            Path to the docker-compose file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeDownTaskParameters.Arguments">
            <summary>
            Arguments for the command
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DockerComposeDownTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeDownTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeDownTask.#ctor(AutomationTool.Tasks.DockerComposeDownTaskParameters)">
            <summary>
            Construct a Docker-Compose task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeDownTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeDownTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeDownTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeDownTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DockerComposeUpTaskParameters">
            <summary>
            Parameters for a Docker-Compose task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeUpTaskParameters.File">
            <summary>
            Path to the docker-compose file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeUpTaskParameters.Arguments">
            <summary>
            Arguments for the command
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DockerComposeUpTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerComposeUpTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeUpTask.#ctor(AutomationTool.Tasks.DockerComposeUpTaskParameters)">
            <summary>
            Construct a Docker-Compose task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeUpTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeUpTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeUpTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerComposeUpTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DockerPushTaskParameters">
            <summary>
            Parameters for a Docker-Build task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.Repository">
            <summary>
            Repository
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.Image">
            <summary>
            Source image to push
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.TargetImage">
            <summary>
            Name of the target image
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.Environment">
            <summary>
            Additional environment variables
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.EnvironmentFile">
            <summary>
            File to read environment from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.AwsEcr">
            <summary>
            Whether to login to AWS ECR
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTaskParameters.RepositoryAuthFile">
            <summary>
            Path to a json file for authentication to the repository for pushing.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DockerPushTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerPushTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerPushTask.#ctor(AutomationTool.Tasks.DockerPushTaskParameters)">
            <summary>
            Construct a Docker task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerPushTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerPushTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerPushTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerPushTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DockerTaskParameters">
            <summary>
            Parameters for a Docker task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerTaskParameters.Arguments">
            <summary>
            Docker command line arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerTaskParameters.Environment">
            <summary>
            Environment variables to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerTaskParameters.EnvironmentFile">
            <summary>
            File to read environment variables from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerTaskParameters.WorkingDir">
            <summary>
            Base directory for running the command
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DockerTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DockerTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.#ctor(AutomationTool.Tasks.DockerTaskParameters)">
            <summary>
            Construct a Docker task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DockerTask.GetDockerExecutablePath">
            <summary>
            Resolve path to Docker executable by using the optional env var "UE_DOCKER_EXEC_PATH"
            Will default to "docker" if not set. Allows supporting alternative Docker implementations such as Podman.
            </summary>
            <returns>Path to Docker executable</returns>
        </member>
        <member name="T:AutomationTool.Tasks.DotNetTaskParameters">
            <summary>
            Parameters for a DotNet task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.Arguments">
            <summary>
            Docker command line arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.BaseDir">
            <summary>
            Base directory for running the command
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.Environment">
            <summary>
            Environment variables to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.EnvironmentFile">
            <summary>
            File to read environment variables from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.ErrorLevel">
            <summary>
            The minimum exit code, which is treated as an error.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTaskParameters.DotNetPath">
            <summary>
            Override path to dotnet executable
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.DotNetTask">
            <summary>
            Spawns Docker and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.DotNetTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DotNetTask.#ctor(AutomationTool.Tasks.DotNetTaskParameters)">
            <summary>
            Construct a Docker task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.DotNetTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.DotNetTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.DotNetTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.DotNetTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.FindModifiedFilesTaskParameters">
            <summary>
            Parameters for a task that compiles a C# project
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTaskParameters.Paths">
            <summary>
            The C# project file to compile. Using semicolons, more than one project file can be specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTaskParameters.Change">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTaskParameters.MinChange">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTaskParameters.MaxChange">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTaskParameters.Output">
            <summary>
            The file to write to
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.FindModifiedFilesTask">
            <summary>
            Compiles C# project files, and their dependencies.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.FindModifiedFilesTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.FindModifiedFilesTask.#ctor(AutomationTool.Tasks.FindModifiedFilesTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.FindModifiedFilesTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.FindModifiedFilesTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.FindModifiedFilesTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.FindModifiedFilesTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.GatherBuildProductsFromFileTaskParameters">
            <summary>
            Parameters for <see cref="T:AutomationTool.Tasks.GatherBuildProductsFromFileTask"/>
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GatherBuildProductsFromFileTaskParameters.BuildProductsFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.GitCloneTaskParameters">
            <summary>
            Parameters for a Git-Checkout task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitCloneTaskParameters.Dir">
            <summary>
            Directory for the repository
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitCloneTaskParameters.Remote">
            <summary>
            The remote to add
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitCloneTaskParameters.Branch">
            <summary>
            The branch to check out on the remote
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitCloneTaskParameters.ConfigFile">
            <summary>
            Configuration file for the repo. This can be used to set up a remote to be fetched and/or provide credentials.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.GitCloneTask">
            <summary>
            Clones a Git repository into a local path.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitCloneTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.#ctor(AutomationTool.Tasks.GitCloneTaskParameters)">
            <summary>
            Construct a Git task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.RunGitAsync(EpicGames.Core.FileReference,System.String,EpicGames.Core.DirectoryReference)">
            <summary>
            Runs a git command
            </summary>
            <param name="ToolFile"></param>
            <param name="Arguments"></param>
            <param name="WorkingDir"></param>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.GitCloneTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.GitTaskParameters">
            <summary>
            Parameters for a Git task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitTaskParameters.Arguments">
            <summary>
            Git command line arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitTaskParameters.BaseDir">
            <summary>
            Base directory for running the command
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitTaskParameters.ErrorLevel">
            <summary>
            The minimum exit code, which is treated as an error.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.GitTask">
            <summary>
            Spawns Git and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.GitTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.GitTask.#ctor(AutomationTool.Tasks.GitTaskParameters)">
            <summary>
            Construct a Git task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.GitTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.GitTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.GitTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.GitTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.HelmTaskParameters">
            <summary>
            Parameters for a Helm task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Chart">
            <summary>
            Helm command line arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Deployment">
            <summary>
            Name of the release
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Namespace">
            <summary>
            The Kubernetes namespace
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.KubeContext">
            <summary>
            The kubectl context
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.KubeConfig">
            <summary>
            The kubectl config file to use
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Values">
            <summary>
            Values to set for running the chart
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.ValuesFile">
            <summary>
            Values to set for running the chart
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Environment">
            <summary>
            Environment variables to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.EnvironmentFile">
            <summary>
            File to parse environment variables from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.Arguments">
            <summary>
            Additional arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTaskParameters.WorkingDir">
            <summary>
            Base directory for running the command
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.HelmTask">
            <summary>
            Spawns Helm and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.HelmTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.HelmTask.#ctor(AutomationTool.Tasks.HelmTaskParameters)">
            <summary>
            Construct a Helm task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.HelmTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.HelmTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.HelmTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.HelmTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.KubectlTaskParameters">
            <summary>
            Parameters for a Kubectl task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.KubectlTaskParameters.Arguments">
            <summary>
            Command line arguments
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.KubectlTaskParameters.BaseDir">
            <summary>
            Base directory for running the command
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.KubectlTask">
            <summary>
            Spawns Kubectl and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.KubectlTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.KubectlTask.#ctor(AutomationTool.Tasks.KubectlTaskParameters)">
            <summary>
            Construct a Kubectl task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.KubectlTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.KubectlTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.KubectlTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.KubectlTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.LogTaskParameters">
            <summary>
            Parameters for the log task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.LogTaskParameters.Message">
            <summary>
            Message to print out.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.LogTaskParameters.Files">
            <summary>
            If specified, causes the given list of files to be printed after the given message.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.LogTaskParameters.IncludeContents">
            <summary>
            If specified, causes the contents of the given files to be printed out.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.LogTask">
            <summary>
            Print a message (and other optional diagnostic information) to the output log.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.LogTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.LogTask.#ctor(AutomationTool.Tasks.LogTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.LogTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.LogTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.LogTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.LogTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.ModifyConfigTaskParameters">
            <summary>
            Parameters for a ModifyConfig task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTaskParameters.File">
            <summary>
            Path to the config file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTaskParameters.Section">
            <summary>
            The section name to modify
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTaskParameters.Key">
            <summary>
            The property name to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTaskParameters.Value">
            <summary>
            The property value to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTaskParameters.Tag">
            <summary>
            Tag to be applied to the extracted files
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.ModifyConfigTask">
            <summary>
            Modifies a config file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyConfigTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyConfigTask.#ctor(AutomationTool.Tasks.ModifyConfigTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyConfigTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyConfigTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyConfigTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyConfigTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.ModifyJsonValueParameters">
            <summary>
            Parameters for a ModifyJsonValue task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyJsonValueParameters.Files">
            <summary>
            json file paths which will be modified
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyJsonValueParameters.KeyPath">
            <summary>
            json key path to find in each file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ModifyJsonValueParameters.NewValue">
            <summary>
            new value to apply
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.ModifyJsonValue">
            <summary>
            Modifies json files by setting a value specified in the key path
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyJsonValue.#ctor(AutomationTool.Tasks.ModifyJsonValueParameters)">
            <summary>
            Create a new ModifyJsonValue.
            </summary>
            <param name="InParameters">Parameters for this task.</param>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyJsonValue.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Placeholder comment
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyJsonValue.Write(System.Xml.XmlWriter)">
            <summary>
            Placeholder comment
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyJsonValue.FindConsumedTagNames">
            <summary>
            Placeholder comment
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ModifyJsonValue.FindProducedTagNames">
            <summary>
            Placeholder comment
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.MoveTaskParameters">
            <summary>
            Parameters for a move task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTaskParameters.Files">
            <summary>
            Optional filter to be applied to the list of input files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTaskParameters.From">
            <summary>
            The pattern(s) to copy from (for example, Engine/*.txt).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTaskParameters.To">
            <summary>
            The directory to copy to.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTaskParameters.Overwrite">
            <summary>
            Optionally if files should be overwritten, defaults to false.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.MoveTask">
            <summary>
            Moves files from one directory to another.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MoveTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.MoveTask.#ctor(AutomationTool.Tasks.MoveTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.MoveTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.MoveTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.MoveTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.MoveTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.MsBuildTaskParameters">
            <summary>
            Parameters for a task that executes MSBuild
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTaskParameters.Project">
            <summary>
            The C# project file to compile. Using semicolons, more than one project file can be specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTaskParameters.Configuration">
            <summary>
            The configuration to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTaskParameters.Platform">
            <summary>
            The platform to compile.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTaskParameters.Arguments">
            <summary>
            Additional options to pass to the compiler.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTaskParameters.Verbosity">
            <summary>
            The MSBuild output verbosity.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.MsBuildTask">
            <summary>
            Executes MsBuild
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.MsBuildTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.MsBuildTask.#ctor(AutomationTool.Tasks.MsBuildTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.MsBuildTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.MsBuildTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.MsBuildTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.MsBuildTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.NotarizeTaskParameters">
            <summary>
            Parameters for a task that notarizes a dmg via the apple notarization process
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTaskParameters.DmgPath">
            <summary>
            Path to the dmg to notarize
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTaskParameters.BundleID">
            <summary>
            primary bundle ID
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTaskParameters.UserName">
            <summary>
            Apple ID Username
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTaskParameters.KeyChainID">
            <summary>
            The keychain ID
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTaskParameters.RequireStapling">
            <summary>
            When true the notarization ticket will be stapled
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.NotarizeTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.NotarizeTask.#ctor(AutomationTool.Tasks.NotarizeTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.NotarizeTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.NotarizeTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.NotarizeTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.NotarizeTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.PakFileTaskParameters">
            <summary>
            Parameters for a task that runs the cooker
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Files">
            <summary>
            List of files, wildcards, and tag sets to add to the pak file, separated by ';' characters.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Output">
            <summary>
            PAK file to output.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.ResponseFile">
            <summary>
            Path to a Response File that contains a list of files to add to the pak file -- instead of specifying them individually.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.RebaseDir">
            <summary>
            Directories to rebase the files relative to. If specified, the shortest path under a listed directory will be used for each file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Order">
            <summary>
            Script that gives the order of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Sign">
            <summary>
            Encryption keys for this pak file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Compress">
            <summary>
            Whether to compress files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Arguments">
            <summary>
            Additional arguments to pass to UnrealPak.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.PakFileTask">
            <summary>
            Creates a PAK file from a given set of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.PakFileTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.#ctor(AutomationTool.Tasks.PakFileTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.FindShortestRelativePath(EpicGames.Core.FileReference,System.Collections.Generic.IEnumerable{EpicGames.Core.DirectoryReference})">
            <summary>
            Find the shortest relative path of the given file from a set of base directories.
            </summary>
            <param name="File">Full path to a file</param>
            <param name="RebaseDirs">Possible base directories</param>
            <returns>The shortest relative path, or null if the file is not under any of them</returns>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.PakFileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.RandomDataTaskParameters">
            <summary>
            Parameters for <see cref="T:AutomationTool.Tasks.RandomDataTask"/>.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTaskParameters.Size">
            <summary>
            The size of each file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTaskParameters.Count">
            <summary>
            Number of files to write.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTaskParameters.Different">
            <summary>
            Whether to generate different data for each output file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTaskParameters.OutputDir">
            <summary>
            Output directory
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTaskParameters.Tag">
            <summary>
            Optional filter to be applied to the list of input files.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.RandomDataTask">
            <summary>
            Creates files containing random data in the specified output directory. Used for generating test data for the temp storage system.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RandomDataTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.RandomDataTask.#ctor(AutomationTool.Tasks.RandomDataTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.RandomDataTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.RandomDataTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.RandomDataTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.RandomDataTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.RenameTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RenameTaskParameters.Files">
            <summary>
            The file or files to rename.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RenameTaskParameters.From">
            <summary>
            The current file name, or pattern to match (for example, *.txt). Should not include any path separators.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RenameTaskParameters.To">
            <summary>
            The new name for the file(s). Should not include any path separators.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RenameTaskParameters.Tag">
            <summary>
            Tag to be applied to the renamed files.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.RenameTask">
            <summary>
            Renames a file, or group of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.RenameTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.RenameTask.#ctor(AutomationTool.Tasks.RenameTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.RenameTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.RenameTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.RenameTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.RenameTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SanitizeReceiptTaskParameters">
            <summary>
            Parameters for the Tag Receipt task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SanitizeReceiptTaskParameters.Files">
            <summary>
            Set of receipt files (*.target) to read, including wildcards and tag names, separated by semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SanitizeReceiptTaskParameters.EngineDir">
            <summary>
            Path to the Engine folder, used to expand $(EngineDir) properties in receipt files. Defaults to the Engine directory for the current workspace.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SanitizeReceiptTask">
            <summary>
            Task that tags build products and/or runtime dependencies by reading from *.target files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SanitizeReceiptTask.Parameters">
            <summary>
            Parameters to this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptTask.#ctor(AutomationTool.Tasks.SanitizeReceiptTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters to select which files to search</param>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are required by this task
            </summary>
            <returns>The tag names which are required by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptTask.FindProducedTagNames">
            <summary>
            Find all the referenced tags from tasks in this task
            </summary>
            <returns>The tag names which are produced/modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SanitizeReceiptExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SanitizeReceiptExtensions.SanitizeReceiptsAsync(EpicGames.Core.FileSet,EpicGames.Core.DirectoryReference)">
            <summary>
            Sanitize the given receipt files, removing any files that don't exist in the current workspace
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SetVersionTaskParameters">
            <summary>
            Parameters for the version task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Change">
            <summary>
            The changelist to set in the version files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.CompatibleChange">
            <summary>
            The engine compatible changelist to set in the version files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Branch">
            <summary>
            The branch string.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Build">
            <summary>
            The build version string.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Licensee">
            <summary>
            Whether to set the IS_LICENSEE_VERSION flag to true.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Promoted">
            <summary>
            Whether to set the ENGINE_IS_PROMOTED_BUILD flag to true.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.SkipWrite">
            <summary>
            If set, do not write to the files -- just return the version files that would be updated. Useful for local builds.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SetVersionTask">
            <summary>
            Updates the local version files (Engine/Source/Runtime/Launch/Resources/Version.h, Engine/Build/Build.version, and Engine/Source/Programs/Shared/Metadata.cs) with the given version information.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.#ctor(AutomationTool.Tasks.SetVersionTaskParameters)">
            <summary>
            Construct a version task
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SignTaskParameters">
            <summary>
            Parameters for a task that strips symbols from a set of files
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SignTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (for example, *.cpp;Engine/.../*.bat), or the name of a tag set.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SignTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SignTask">
            <summary>
            Signs a set of executable files with an installed certificate.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SignTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SignTask.#ctor(AutomationTool.Tasks.SignTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SignTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SignTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SignTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SignTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SpawnTaskParameters">
            <summary>
            Parameters for a spawn task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.Exe">
            <summary>
            Executable to spawn.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.Arguments">
            <summary>
            Arguments for the newly created process.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.WorkingDir">
            <summary>
            Working directory for spawning the new task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.Environment">
            <summary>
            Environment variables to set
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.EnvironmentFile">
            <summary>
            File to read environment from
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.LogOutput">
            <summary>
            Write output to the log
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTaskParameters.ErrorLevel">
            <summary>
            The minimum exit code, which is treated as an error.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SpawnTaskBase">
            <summary>
            Base class for tasks that run an external tool
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTaskBase.ExecuteAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Int32,System.String,AutomationTool.ProcessResult.SpewFilterCallbackType)">
            <summary>
            Execute a command
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTaskBase.ParseEnvVars(System.String,System.String)">
            <summary>
            Parses environment from a property and file
            </summary>
            <param name="Environment"></param>
            <param name="EnvironmentFile"></param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTaskBase.ParseEnvironment(System.String,System.Char,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parse environment from a string
            </summary>
            <param name="Environment"></param>
            <param name="Separator"></param>
            <param name="EnvVars"></param>
        </member>
        <member name="T:AutomationTool.Tasks.SpawnTask">
            <summary>
            Spawns an external executable and waits for it to complete.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SpawnTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTask.#ctor(AutomationTool.Tasks.SpawnTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SpawnTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.StageTaskParameters">
            <summary>
            Parameters for the staging task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Project">
            <summary>
            The project that this target belongs to.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Target">
            <summary>
            Name of the target to stage.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Platform">
            <summary>
            Platform to stage.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Configuration">
            <summary>
            Configuration to be staged.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Architecture">
            <summary>
            Architecture to be staged.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.ToDir">
            <summary>
            Directory that the receipt files should be staged to.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Overwrite">
            <summary>
            Whether to overwrite existing files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.StageTask">
            <summary>
            Stages files listed in a build receipt to an output directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StageTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StageTask.#ctor(AutomationTool.Tasks.StageTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.StageTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.StageTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StageTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.StageTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.StripTaskParameters">
            <summary>
            Parameters for a task that strips symbols from a set of files
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTaskParameters.Platform">
            <summary>
            The platform toolchain to strip binaries.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTaskParameters.BaseDir">
            <summary>
            The directory to find files in.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (for example, Engine/.../*.pdb), or the name of a tag set.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTaskParameters.OutputDir">
            <summary>
            Output directory for the stripped files. Defaults to the input path, overwriting the input files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.StripTask">
            <summary>
            Strips debugging information from a set of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.StripTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StripTask.#ctor(AutomationTool.Tasks.StripTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.StripTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.StripTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.StripTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.StripTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SubmitTaskParameters">
            <summary>
            Parameters for the submit task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Description">
            <summary>
            The description for the submitted changelist.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Files">
            <summary>
            The files to submit.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.FileType">
            <summary>
            The Perforce file type for the submitted files (for example, binary+FS32).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Workspace">
            <summary>
            The workspace name. If specified, a new workspace will be created using the given stream and root directory to submit the files. If not, the current workspace will be used.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Stream">
            <summary>
            The stream for the workspace -- defaults to the current stream. Ignored unless the Workspace attribute is also specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Branch">
            <summary>
            Branch for the workspace (legacy P4 depot path). May not be used in conjunction with Stream.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.RootDir">
            <summary>
            Root directory for the stream. If not specified, defaults to the current root directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.RevertUnchanged">
            <summary>
            Whether to revert unchanged files before attempting to submit.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Force">
            <summary>
            Force the submit to happen -- even if a resolve is needed (always accept current version).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.P4Verbose">
            <summary>
            Allow verbose P4 output (spew).
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SubmitTask">
            <summary>
            Creates a new changelist and submits a set of files to a Perforce stream.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.#ctor(AutomationTool.Tasks.SubmitTaskParameters)">
            <summary>
            Construct a version task
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SymStoreTaskParameters">
            <summary>
            Parameters for a task that uploads symbols to a symbol server
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.Platform">
            <summary>
            The platform toolchain required to handle symbol files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.Files">
            <summary>
            List of output files. PDBs will be extracted from this list.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.StoreDir">
            <summary>
            Output directory for the compressed symbols.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.Product">
            <summary>
            Name of the product for the symbol store records.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.Branch">
            <summary>
            Name of the Branch to base all the depot source files from.
            Used when IndexSources is true (may be used only on some platforms).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.Change">
            <summary>
            Changelist to which all the depot source files have been synced to.
            Used when IndexSources is true (may be used only on some platforms).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.BuildVersion">
            <summary>
            BuildVersion associated with these symbols. Used for clean-up in AgeStore by matching this version against a directory name in a build share.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.IndexSources">
            <summary>
            Whether to include the source code index in the uploaded symbols.
            When enabled, the task will generate data required by a source server (only some platforms and source control servers are supported).
            The source server allows debuggers to automatically fetch the matching source code when debbugging builds or analyzing dumps.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTaskParameters.SourceFiles">
            <summary>
            Filter for the depot source files that are to be indexed.
            It's a semicolon-separated list of perforce filter e.g. Engine/....cpp;Engine/....h.
            It may also be a name of a previously defined tag e.g. "#SourceFiles
            Used when IndexSources is true (may be used only on some platforms).
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SymStoreTask">
            <summary>
            Task that strips symbols from a set of files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SymStoreTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SymStoreTask.#ctor(AutomationTool.Tasks.SymStoreTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SymStoreTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.SymStoreTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SymStoreTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SymStoreTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.TagReceiptTaskParameters">
            <summary>
            Parameters for the Tag Receipt task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.Files">
            <summary>
            Set of receipt files (*.target) to read, including wildcards and tag names, separated by semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.EngineDir">
            <summary>
            Path to the Engine folder, used to expand $(EngineDir) properties in receipt files. Defaults to the Engine directory for the current workspace.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.ProjectDir">
            <summary>
            Path to the project folder, used to expand $(ProjectDir) properties in receipt files. Defaults to the Engine directory for the current workspace -- DEPRECATED.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.BuildProducts">
            <summary>
            Whether to tag the Build Products listed in receipts.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.BuildProductType">
            <summary>
            Which type of Build Products to tag (see TargetReceipt.cs - UnrealBuildTool.BuildProductType for valid values).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.RuntimeDependencies">
            <summary>
            Whether to tag the Runtime Dependencies listed in receipts.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.StagedFileType">
            <summary>
            Which type of Runtime Dependencies to tag (see TargetReceipt.cs - UnrealBuildTool.StagedFileType for valid values).
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.With">
            <summary>
            Name of the tag to apply.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.TagReceiptTask">
            <summary>
            Task that tags build products and/or runtime dependencies by reading from *.target files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTask.Parameters">
            <summary>
            Parameters to this task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTask.BuildProductType">
            <summary>
            The type of build products to enumerate. May be null.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTask.StagedFileType">
            <summary>
            The type of staged files to enumerate. May be null,
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.#ctor(AutomationTool.Tasks.TagReceiptTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters to select which files to search</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are required by this task
            </summary>
            <returns>The tag names which are required by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.FindProducedTagNames">
            <summary>
            Find all the referenced tags from tasks in this task
            </summary>
            <returns>The tag names which are produced/modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.TaskExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TaskExtensions.TagReceiptsAsync(EpicGames.Core.FileSet,EpicGames.Core.DirectoryReference,System.Boolean,System.Nullable{UnrealBuildTool.BuildProductType},System.Boolean,System.Nullable{UnrealBuildTool.StagedFileType})">
            <summary>
            Task that tags build products and/or runtime dependencies by reading from *.target files.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.TagTaskParameters">
            <summary>
            Parameters for the Tag task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.BaseDir">
            <summary>
            Set the base directory to resolve relative paths and patterns against. If set, any absolute patterns (for example, /Engine/Build/...) are taken to be relative to this path. If not, they are taken to be truly absolute.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Files">
            <summary>
            Set of files to work from, including wildcards and tag names, separated by semicolons. If set, resolved relative to BaseDir, otherwise resolved to the branch root directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.FileLists">
            <summary>
            Set of text files to add additional files from. Each file list should have one file per line.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Filter">
            <summary>
            Patterns to filter the list of files by, including tag names or wildcards. If set, may include patterns that apply to the base directory. If not specified, defaults to all files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Except">
            <summary>
            Set of patterns to exclude from the matched list. May include tag names of patterns that apply to the base directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.With">
            <summary>
            Name of the tag to apply.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.TagTask">
            <summary>
            Applies a tag to a given set of files. The list of files is found by enumerating the tags and file specifications given by the 'Files' 
            parameter. From this list, any files not matched by the 'Filter' parameter are removed, followed by any files matched by the 'Except' parameter.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTask.Parameters">
            <summary>
            Parameters to this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.#ctor(AutomationTool.Tasks.TagTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters to select which files to match</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.ParseRules(EpicGames.Core.DirectoryReference,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Add rules matching a given set of patterns to a file filter. Patterns are added as absolute paths from the root.
            </summary>
            <param name="BaseDir">The base directory for relative paths.</param>
            <param name="DelimitedPatterns">List of patterns to add, separated by semicolons.</param>
            <param name="TagNameToFileSet">Mapping of tag name to a set of files.</param>
            <returns>List of rules, suitable for adding to a FileFilter object</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.FindProducedTagNames">
            <summary>
            Find all the referenced tags from tasks in this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.UnzipTaskParameters">
            <summary>
            Parameters for a zip task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UnzipTaskParameters.ZipFile">
            <summary>
            Path to the zip file to extract.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UnzipTaskParameters.ToDir">
            <summary>
            Output directory for the extracted files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UnzipTaskParameters.UseLegacyUnzip">
            <summary>
            Whether or not to use the legacy unzip code.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UnzipTaskParameters.Tag">
            <summary>
            Tag to be applied to the extracted files.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.UnzipTask">
            <summary>
            Extract files from a zip archive.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UnzipTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.UnzipTask.#ctor(AutomationTool.Tasks.UnzipTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.UnzipTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names \to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.UnzipTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.UnzipTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.UnzipTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.UploadTaskParameters">
            <summary>
            Parameters for a zip task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.FromDir">
            <summary>
            The directory to read compressed files from.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (for example, *.cpp;Engine/.../*.bat), or the name of a tag set. Relative paths are taken from FromDir.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.JupiterNamespace">
            <summary>
            The jupiter namespace used to upload the build. Used to control who has access to the build.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.JupiterKey">
            <summary>
            The key of the build as will be used to download the build again. This has to be globally unique for this particular upload.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.ArchiveType">
            <summary>
            The type of archive these files are from, will be added to the metadata
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.ProjectName">
            <summary>
            The name of the project this set of files are associated with, will be added to the metadata
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.Branch">
            <summary>
            The source control branch these files were generated from, will be added to the metadata
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.Changelist">
            <summary>
            The source control revision these files were generated from, will be added to the metadata
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.JupiterUrl">
            <summary>
            Specify the url to the Jupiter instance to upload to
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.AdditionalMetadata">
            <summary>
            Semi-colon separated list of '=' separated key value mappings to add to the metadata. E.g. Foo=bar;spam=eggs
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTaskParameters.LimitMemoryUsage">
            <summary>
            If enabled file content is not kept in memory, results in lower memory usage but increased io as file contents needs to be read multiple times (for hashing as well as during upload)
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.UploadTask">
            <summary>
            Uploads a set of files to Jupiter for future retrival
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.UploadTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.UploadTask.#ctor(AutomationTool.Tasks.UploadTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.UploadTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.UploadTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.UploadTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.UploadTask.FindProducedTagNames">
            <summary>
            Finds the tags which are produced by this task
            </summary>
            <returns>The tag names which are produced by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.WaitTaskParameters">
            <summary>
            Parameters for a wait task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WaitTaskParameters.Seconds">
            <summary>
            Number of seconds to wait.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.WaitTask">
            <summary>
            Waits a defined number of seconds.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WaitTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.WaitTask.#ctor(AutomationTool.Tasks.WaitTaskParameters)">
            <summary>
            Construct a wait task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.Tasks.WaitTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.WaitTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.WaitTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.WaitTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.WriteTextFileTaskParameters">
            <summary>
            Parameters for a <see cref="T:AutomationTool.Tasks.WriteTextFileTask"/>.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTaskParameters.File">
            <summary>
            Path to the file to write.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTaskParameters.Append">
            <summary>
            Optional, whether or not to append to the file rather than overwrite.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTaskParameters.Text">
            <summary>
            The text to write to the file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTaskParameters.Files">
            <summary>
            If specified, causes the given list of files to be printed after the given message.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.WriteTextFileTask">
            <summary>
            Writes text to a file.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.WriteTextFileTask.Parameters">
            <summary>
            Parameters for this task.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.WriteTextFileTask.#ctor(AutomationTool.Tasks.WriteTextFileTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task.</param>
        </member>
        <member name="M:AutomationTool.Tasks.WriteTextFileTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job.</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include.</param>
        </member>
        <member name="M:AutomationTool.Tasks.WriteTextFileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.WriteTextFileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.WriteTextFileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.ZipTaskParameters">
            <summary>
            Parameters for a zip task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ZipTaskParameters.FromDir">
            <summary>
            The directory to read compressed files from.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ZipTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (for example, *.cpp;Engine/.../*.bat), or the name of a tag set. Relative paths are taken from FromDir.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ZipTaskParameters.ZipFile">
            <summary>
            The zip file to create.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ZipTaskParameters.Tag">
            <summary>
            Tag to be applied to the created zip file.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.ZipTask">
            <summary>
            Compresses files into a zip archive.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.ZipTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ZipTask.#ctor(AutomationTool.Tasks.ZipTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.ZipTask.ExecuteAsync(AutomationTool.JobContext,System.Collections.Generic.HashSet{EpicGames.Core.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{EpicGames.Core.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
        </member>
        <member name="M:AutomationTool.Tasks.ZipTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.ZipTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.ZipTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.TempStorageBlock">
            <summary>
            Stores the name of a temp storage block
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageBlock.NodeName">
            <summary>
            Name of the node
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageBlock.OutputName">
            <summary>
            Name of the output from this node
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.#ctor">
            <summary>
            Default constructor, for XML serialization.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.#ctor(System.String,System.String)">
            <summary>
            Construct a temp storage block
            </summary>
            <param name="InNodeName">Name of the node</param>
            <param name="InOutputName">Name of the node's output</param>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.Equals(System.Object)">
            <summary>
            Tests whether two temp storage blocks are equal
            </summary>
            <param name="Other">The object to compare against</param>
            <returns>True if the blocks are equivalent</returns>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.GetHashCode">
            <summary>
            Returns a hash code for this block name
            </summary>
            <returns>Hash code for the block</returns>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.ToString">
            <summary>
            Returns the name of this block for debugging purposes
            </summary>
            <returns>Name of this block as a string</returns>
        </member>
        <member name="T:AutomationTool.TempStorageFile">
            <summary>
            Information about a single file in temp storage
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.RelativePath">
            <summary>
            The path of the file, relative to the engine root. Stored using forward slashes.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.LastWriteTimeUtcTicks">
            <summary>
            The last modified time of the file, in UTC ticks since the Epoch.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.Length">
            <summary>
            Length of the file
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.Digest">
            <summary>
            Digest for the file. Not all files are hashed.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFile.#ctor">
            <summary>
            Default constructor, for XML serialization.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFile.#ctor(System.IO.FileInfo,EpicGames.Core.DirectoryReference)">
            <summary>
            Constructor
            </summary>
            <param name="FileInfo">File to be added</param>
            <param name="RootDir">Root directory to store paths relative to</param>
        </member>
        <member name="M:AutomationTool.TempStorageFile.Compare(EpicGames.Core.DirectoryReference)">
            <summary>
            Compare stored for this file with the one on disk, and output an error if they differ.
            </summary>
            <param name="RootDir">Root directory for this branch</param>
            <returns>True if the files are identical, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.Compare(EpicGames.Core.DirectoryReference,System.String@)">
            <summary>
            Compare stored for this file with the one on disk, and output an error if they differ.
            </summary>
            <param name="RootDir">Root directory for this branch</param>
            <param name="Message">Message describing the difference</param>
            <returns>True if the files are identical, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.RequireMatchingTimestamps">
            <summary>
            Whether we should compare timestamps for this file. Some build products are harmlessly overwritten as part of the build process, so we flag those here.
            </summary>
            <returns>True if we should compare the file's timestamp, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.GenerateDigest">
            <summary>
            Determines whether to generate a digest for the current file
            </summary>
            <returns>True to generate a digest for this file, rather than relying on timestamps</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.ShouldSerializeDigest">
            <summary>
            Determine whether to serialize the digest property
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.ToFileReference(EpicGames.Core.DirectoryReference)">
            <summary>
            Gets a local file reference for this file, given a root directory to base it from.
            </summary>
            <param name="RootDir">The local root directory</param>
            <returns>Reference to the file</returns>
        </member>
        <member name="T:AutomationTool.TempStorageZipFile">
            <summary>
            Information about a single file in temp storage
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageZipFile.Name">
            <summary>
            Name of this file, including extension
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageZipFile.Length">
            <summary>
            Length of the file in bytes
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageZipFile.#ctor">
            <summary>
            Default constructor, for XML serialization
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageZipFile.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor
            </summary>
            <param name="Info">FileInfo for the zip file</param>
        </member>
        <member name="T:AutomationTool.TempStorageManifest">
            <summary>
            A manifest storing information about build products for a node's output
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.Files">
            <summary>
            List of output files
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.ZipFiles">
            <summary>
            List of compressed archives containing the given files
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.Serializer">
            <summary>
            Construct a static Xml serializer to avoid throwing an exception searching for the reflection info at runtime
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.#ctor">
            <summary>
            Construct an empty temp storage manifest
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.#ctor(System.IO.FileInfo[],EpicGames.Core.DirectoryReference)">
            <summary>
            Creates a manifest from a flat list of files (in many folders) and a BaseFolder from which they are rooted.
            </summary>
            <param name="InFiles">List of full file paths</param>
            <param name="RootDir">Root folder for all the files. All files must be relative to this RootDir.</param>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.GetTotalSize">
            <summary>
            Gets the total size of the files stored in this manifest
            </summary>
            <returns>The total size of all files</returns>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.Load(EpicGames.Core.FileReference)">
            <summary>
            Load a manifest from disk
            </summary>
            <param name="file">File to load</param>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.Save(EpicGames.Core.FileReference)">
            <summary>
            Saves a manifest to disk
            </summary>
            <param name="File">File to save</param>
        </member>
        <member name="T:AutomationTool.TempStorageFileList">
            <summary>
            Stores the contents of a tagged file set
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.LocalFiles">
            <summary>
            List of files that are in this tag set, relative to the root directory
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.ExternalFiles">
            <summary>
            List of files that are in this tag set, but not relative to the root directory
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.Blocks">
            <summary>
            List of referenced storage blocks
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.Serializer">
            <summary>
            Construct a static Xml serializer to avoid throwing an exception searching for the reflection info at runtime
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.#ctor">
            <summary>
            Construct an empty file list for deserialization
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.#ctor(System.Collections.Generic.IEnumerable{EpicGames.Core.FileReference},EpicGames.Core.DirectoryReference,System.Collections.Generic.IEnumerable{AutomationTool.TempStorageBlock})">
            <summary>
            Creates a manifest from a flat list of files (in many folders) and a BaseFolder from which they are rooted.
            </summary>
            <param name="InFiles">List of full file paths</param>
            <param name="RootDir">Root folder for all the files. All files must be relative to this RootDir.</param>
            <param name="InBlocks">Referenced storage blocks required for these files</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.Load(EpicGames.Core.FileReference)">
            <summary>
            Load this list of files from disk
            </summary>
            <param name="File">File to load</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.Save(EpicGames.Core.FileReference)">
            <summary>
            Saves this list of files to disk
            </summary>
            <param name="File">File to save</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.ToFileSet(EpicGames.Core.DirectoryReference)">
            <summary>
            Converts this file list into a set of FileReference objects
            </summary>
            <param name="RootDir">The root directory to rebase local files</param>
            <returns>Set of files</returns>
        </member>
        <member name="T:AutomationTool.TempStorage">
            <summary>
            Tracks the state of the current build job using the filesystem, allowing jobs to be restarted after a failure or expanded to include larger targets, and 
            providing a proxy for different machines executing parts of the build in parallel to transfer build products and share state as part of a build system.
            
            If a shared temp storage directory is provided - typically a mounted path on a network share - all build products potentially needed as inputs by another node
            are compressed and copied over, along with metadata for them (see TempStorageFile) and flags for build events that have occurred (see TempStorageEvent).
            
            The local temp storage directory contains the same information, with the exception of the archived build products. Metadata is still kept to detect modified 
            build products between runs. If data is not present in local temp storage, it's retrieved from shared temp storage and cached in local storage.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.RootDir">
            <summary>
            Root directory for this branch.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.LocalDir">
            <summary>
            The local temp storage directory (typically somewhere under /Engine/Saved directory).
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.SharedDir">
            <summary>
            The shared temp storage directory; typically a network location. May be null.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.bWriteToSharedStorage">
            <summary>
            Whether to allow writes to shared storage
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorage.#ctor(EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="InRootDir">Root directory for this branch</param>
            <param name="InLocalDir">The local temp storage directory.</param>
            <param name="InSharedDir">The shared temp storage directory. May be null.</param>
            <param name="bInWriteToSharedStorage">Whether to write to shared storage, or only permit reads from it</param>
        </member>
        <member name="M:AutomationTool.TempStorage.CleanLocal">
            <summary>
            Cleans all cached local state. We never remove shared storage.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorage.CleanLocalNode(System.String)">
            <summary>
            Cleans local build products for a given node. Does not modify shared storage.
            </summary>
            <param name="NodeName">Name of the node</param>
        </member>
        <member name="M:AutomationTool.TempStorage.IsComplete(System.String)">
            <summary>
            Check whether the given node is complete
            </summary>
            <param name="NodeName">Name of the node</param>
            <returns>True if the node is complete</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.MarkAsComplete(System.String)">
            <summary>
            Mark the given node as complete
            </summary>
            <param name="NodeName">Name of the node</param>
        </member>
        <member name="M:AutomationTool.TempStorage.CheckLocalIntegrity(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks the integrity of the give node's local build products.
            </summary>
            <param name="NodeName">The node to retrieve build products for</param>
            <param name="TagNames">List of tag names from this node.</param>
            <returns>True if the node is complete and valid, false if not (and typically followed by a call to CleanNode()).</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.ReadFileList(System.String,System.String)">
            <summary>
            Reads a set of tagged files from disk
            </summary>
            <param name="NodeName">Name of the node which produced the tag set</param>
            <param name="TagName">Name of the tag, with a '#' prefix</param>
            <returns>The set of files</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.WriteFileList(System.String,System.String,System.Collections.Generic.IEnumerable{EpicGames.Core.FileReference},System.Collections.Generic.IEnumerable{AutomationTool.TempStorageBlock})">
            <summary>
            Writes a list of tagged files to disk
            </summary>
            <param name="NodeName">Name of the node which produced the tag set</param>
            <param name="TagName">Name of the tag, with a '#' prefix</param>
            <param name="Files">List of files in this set</param>
            <param name="Blocks">List of referenced storage blocks</param>
            <returns>The set of files</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.Archive(System.String,System.String,EpicGames.Core.FileReference[],System.Boolean)">
            <summary>
            Saves the given files (that should be rooted at the branch root) to a shared temp storage manifest with the given temp storage node and game.
            </summary>
            <param name="NodeName">The node which created the storage block</param>
            <param name="BlockName">Name of the block to retrieve. May be null or empty.</param>
            <param name="BuildProducts">Array of build products to be archived</param>
            <param name="bPushToRemote">Allow skipping the copying of this manifest to shared storage, because it's not required by any other agent</param>
            <returns>The created manifest instance (which has already been saved to disk).</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.Retrieve(System.String,System.String)">
            <summary>
            Retrieve an output of the given node. Fetches and decompresses the files from shared storage if necessary, or validates the local files.
            </summary>
            <param name="NodeName">The node which created the storage block</param>
            <param name="OutputName">Name of the block to retrieve. May be null or empty.</param>
            <returns>Manifest of the files retrieved</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.ParallelZipFiles(System.IO.FileInfo[],EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,System.String)">
            <summary>
            Zips a set of files (that must be rooted at the given RootDir) to a set of zip files in the given OutputDir. The files will be prefixed with the given basename.
            </summary>
            <param name="InputFiles">Fully qualified list of files to zip (must be rooted at RootDir).</param>
            <param name="RootDir">Root Directory where all files will be extracted.</param>
            <param name="OutputDir">Location to place the set of zip files created.</param>
            <param name="StagingDir">Location to create zip files before copying them to the OutputDir. If the OutputDir is on a remote file share, staging may be more efficient. Use null to avoid using a staging copy.</param>
            <param name="ZipBaseName">The basename of the set of zip files.</param>
            <returns>Some metrics about the zip process.</returns>
            <remarks>
            This function tries to zip the files in parallel as fast as it can. It makes no guarantees about how many zip files will be created or which files will be in which zip,
            but it does try to reasonably balance the file sizes.
            </remarks>
        </member>
        <member name="M:AutomationTool.TempStorage.ParallelUnzipFiles(System.IO.FileInfo[],EpicGames.Core.DirectoryReference)">
            <summary>
            Unzips a set of zip files with a given basename in a given folder to a given RootDir.
            </summary>
            <param name="ZipFiles">Files to extract</param>
            <param name="RootDir">Root Directory where all files will be extracted.</param>
            <returns>Some metrics about the unzip process.</returns>
            <remarks>
            The code is expected to be the used as the symmetrical inverse of <see cref="M:AutomationTool.TempStorage.ParallelZipFiles(System.IO.FileInfo[],EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,EpicGames.Core.DirectoryReference,System.String)"/>, but could be used independently, as long as the files in the zip do not overlap.
            </remarks>
        </member>
        <member name="M:AutomationTool.TempStorage.GetDirectoryForNode(EpicGames.Core.DirectoryReference,System.String)">
            <summary>
            Gets the directory used to store data for the given node
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node</param>
            <returns>Directory to contain a node's data</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.GetManifestLocation(EpicGames.Core.DirectoryReference,System.String,System.String)">
            <summary>
            Gets the path to the manifest created for a node's output.
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
            <param name="BlockName">Name of the output block to get the manifest for</param>
        </member>
        <member name="M:AutomationTool.TempStorage.GetTaggedFileListLocation(EpicGames.Core.DirectoryReference,System.String,System.String)">
            <summary>
            Gets the path to the file created to store a tag manifest for a node
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
            <param name="TagName">Name of the tag to get the manifest for</param>
        </member>
        <member name="M:AutomationTool.TempStorage.GetCompleteMarkerFile(EpicGames.Core.DirectoryReference,System.String)">
            <summary>
            Gets the path to a file created to indicate that a node is complete, under the given base directory.
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
        </member>
        <member name="M:AutomationTool.TempStorage.IsDuplicateBuildProduct(EpicGames.Core.FileReference)">
            <summary>
            Checks whether the given path is allowed as a build product that can be produced by more than one node (timestamps may be modified, etc..). Used to suppress
            warnings about build products being overwritten.
            </summary>
            <param name="LocalFile">File name to check</param>
            <returns>True if the given path may be output by multiple build products</returns>
        </member>
        <member name="T:AutomationTool.TempStorageTests">
            <summary>
            Automated tests for temp storage
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageTests.ExecuteBuild">
            <summary>
            Run the automated tests
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageTests.SelectFiles(EpicGames.Core.DirectoryReference,System.Char,System.Char)">
            <summary>
            Enumerate all the files beginning with a letter within a certain range
            </summary>
            <param name="SourceDir">The directory to read from</param>
            <param name="CharRangeBegin">First character in the range to files to return</param>
            <param name="CharRangeEnd">Last character (inclusive) in the range of files to return</param>
            <returns>Mapping from filename to timestamp</returns>
        </member>
        <member name="M:AutomationTool.TempStorageTests.CheckManifest(EpicGames.Core.DirectoryReference,AutomationTool.TempStorageManifest,System.Collections.Generic.Dictionary{EpicGames.Core.FileReference,System.DateTime})">
            <summary>
            Checks that a manifest matches the files on disk
            </summary>
            <param name="RootDir">Root directory for relative paths in the manifest</param>
            <param name="Manifest">Manifest to check</param>
            <param name="Files">Mapping of filename to timestamp as expected in the manifest</param>
        </member>
        <member name="T:AutomationTool.CleanTempStorage">
            <summary>
            Commandlet to clean up all folders under a temp storage root that are older than a given number of days
            </summary>
        </member>
        <member name="M:AutomationTool.CleanTempStorage.ExecuteBuild">
            <summary>
            Entry point for the commandlet
            </summary>
        </member>
    </members>
</doc>
