diff --git a/patch/patch.cfg b/patch/patch.cfg
index f902d8789..9ebb814c7 100644
--- a/patch/patch.cfg
+++ b/patch/patch.cfg
@@ -544,5 +544,9 @@ patches = [
     # Linux: Fix undefined symbol from ChromeSettingsProto.
     # https://bugs.chromium.org/p/chromium/issues/detail?id=1119417#c24
     'name': 'chrome_browser_privacy_1119417',
+  },
+  {
+    # Linux: Fix symbol loading for UE4Editor
+    'name': 'ue4_linux_so_load_fixes',
   }
 ]
diff --git a/patch/patches/ue4_linux_so_load_fixes.patch b/patch/patches/ue4_linux_so_load_fixes.patch
new file mode 100755
index 000000000..5e5913451
--- /dev/null
+++ b/patch/patches/ue4_linux_so_load_fixes.patch
@@ -0,0 +1,65 @@
+diff --git base/allocator/allocator_shim_default_dispatch_to_glibc.cc base/allocator/allocator_shim_default_dispatch_to_glibc.cc
+index 6c4ee219c272..6a99a55cbe9a 100644
+--- base/allocator/allocator_shim_default_dispatch_to_glibc.cc
++++ base/allocator/allocator_shim_default_dispatch_to_glibc.cc
+@@ -64,7 +64,7 @@ size_t GlibcGetSizeEstimate(const AllocatorDispatch*,
+   using MallocUsableSizeFunction = decltype(malloc_usable_size)*;
+   static MallocUsableSizeFunction fn_ptr =
+       reinterpret_cast<MallocUsableSizeFunction>(
+-          dlsym(RTLD_NEXT, "malloc_usable_size"));
++          dlsym(RTLD_DEFAULT, "malloc_usable_size"));
+ 
+   return fn_ptr(address);
+ }
+diff --git sandbox/linux/services/libc_interceptor.cc sandbox/linux/services/libc_interceptor.cc
+index 609605c2bcbd..8caa8482cebc 100644
+--- sandbox/linux/services/libc_interceptor.cc
++++ sandbox/linux/services/libc_interceptor.cc
+@@ -182,13 +182,13 @@ static LocaltimeRFunction g_libc_localtime64_r;
+ 
+ static void InitLibcLocaltimeFunctionsImpl() {
+   g_libc_localtime =
+-      reinterpret_cast<LocaltimeFunction>(dlsym(RTLD_NEXT, "localtime"));
++      reinterpret_cast<LocaltimeFunction>(dlsym(RTLD_DEFAULT, "localtime"));
+   g_libc_localtime64 =
+-      reinterpret_cast<LocaltimeFunction>(dlsym(RTLD_NEXT, "localtime64"));
++      reinterpret_cast<LocaltimeFunction>(dlsym(RTLD_DEFAULT, "localtime64"));
+   g_libc_localtime_r =
+-      reinterpret_cast<LocaltimeRFunction>(dlsym(RTLD_NEXT, "localtime_r"));
++      reinterpret_cast<LocaltimeRFunction>(dlsym(RTLD_DEFAULT, "localtime_r"));
+   g_libc_localtime64_r =
+-      reinterpret_cast<LocaltimeRFunction>(dlsym(RTLD_NEXT, "localtime64_r"));
++      reinterpret_cast<LocaltimeRFunction>(dlsym(RTLD_DEFAULT, "localtime64_r"));
+ 
+   if (!g_libc_localtime || !g_libc_localtime_r) {
+     // https://bugs.chromium.org/p/chromium/issues/detail?id=16800
+@@ -196,10 +196,11 @@ static void InitLibcLocaltimeFunctionsImpl() {
+     // Nvidia's libGL.so overrides dlsym for an unknown reason and replaces
+     // it with a version which doesn't work. In this case we'll get a NULL
+     // result. There's not a lot we can do at this point, so we just bodge it!
+-    LOG(ERROR) << "Your system is broken: dlsym doesn't work! This has been "
++    /*LOG(ERROR) << "Your system is broken: dlsym doesn't work! This has been "
+                   "reported to be caused by Nvidia's libGL. You should expect"
+                   " time related functions to misbehave. "
+-                  "https://bugs.chromium.org/p/chromium/issues/detail?id=16800";
++                  "https://bugs.chromium.org/p/chromium/issues/detail?id=16800";*/
++    fprintf( stderr, "Your system is broken: dlsym doesn't work!\n" );
+   }
+ 
+   if (!g_libc_localtime)
+diff --git content/app/content_main.cc content/app/content_main.cc
+index df88067d61a6..d75f6e74e2bb 100644
+--- content/app/content_main.cc
++++ content/app/content_main.cc
+@@ -98,9 +98,11 @@ void SetupSignalHandlers() {
+ 
+   // Sanitise our signal handling state. Signals that were ignored by our
+   // parent will also be ignored by us. We also inherit our parent's sigmask.
++#if 0
+   sigset_t empty_signal_set;
+   CHECK_EQ(0, sigemptyset(&empty_signal_set));
+   CHECK_EQ(0, sigprocmask(SIG_SETMASK, &empty_signal_set, nullptr));
++#endif
+ 
+   struct sigaction sigact;
+   memset(&sigact, 0, sizeof(sigact));
